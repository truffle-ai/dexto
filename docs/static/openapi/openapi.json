{
  "openapi": "3.0.0",
  "info": {
    "title": "Dexto API",
    "version": "1.2.4",
    "description": "OpenAPI spec for the Dexto REST API server"
  },
  "servers": [
    {
      "url": "http://localhost:3001",
      "description": "Local development server (default port)"
    },
    {
      "url": "http://localhost:{port}",
      "description": "Local development server (custom port)",
      "variables": {
        "port": {
          "default": "3001",
          "description": "API server port"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "system",
      "description": "System health and status endpoints"
    },
    {
      "name": "config",
      "description": "Agent configuration and greeting management"
    },
    {
      "name": "messages",
      "description": "Send messages to the agent and manage conversations"
    },
    {
      "name": "sessions",
      "description": "Create and manage conversation sessions"
    },
    {
      "name": "llm",
      "description": "Configure and switch between LLM providers and models"
    },
    {
      "name": "mcp",
      "description": "Manage Model Context Protocol (MCP) servers and tools"
    },
    {
      "name": "webhooks",
      "description": "Register and manage webhook endpoints for agent events"
    },
    {
      "name": "search",
      "description": "Search through messages and sessions"
    },
    {
      "name": "memory",
      "description": "Store and retrieve agent memories for context"
    },
    {
      "name": "prompts",
      "description": "Manage custom prompts and templates"
    },
    {
      "name": "resources",
      "description": "Access and manage resources from MCP servers and internal providers"
    },
    {
      "name": "agents",
      "description": "Install, switch, and manage agent configurations"
    }
  ],
  "components": {
    "schemas": {},
    "parameters": {}
  },
  "paths": {
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Returns server health status",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "Server health",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          }
        }
      }
    },
    "/api/greeting": {
      "get": {
        "summary": "Get Greeting Message",
        "description": "Retrieves the greeting message from the agent configuration",
        "tags": [
          "config"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Session identifier to retrieve session-specific greeting"
            },
            "required": false,
            "description": "Session identifier to retrieve session-specific greeting",
            "name": "sessionId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Greeting",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "greeting": {
                      "type": "string",
                      "description": "Greeting message from agent configuration"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/message": {
      "post": {
        "summary": "Send Message (async)",
        "description": "Sends a message and returns immediately. The full response will be sent over WebSocket",
        "tags": [
          "messages"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "The user message text"
                  },
                  "sessionId": {
                    "type": "string",
                    "description": "The session to use for this message"
                  },
                  "stream": {
                    "type": "boolean",
                    "description": "Set to true to receive streaming chunks over WebSocket"
                  },
                  "imageData": {
                    "type": "object",
                    "properties": {
                      "base64": {
                        "type": "string",
                        "description": "Base64-encoded image data"
                      },
                      "mimeType": {
                        "type": "string",
                        "description": "The MIME type of the image (e.g., image/png)"
                      }
                    },
                    "required": [
                      "base64",
                      "mimeType"
                    ],
                    "description": "Optional image data to include with the message"
                  },
                  "fileData": {
                    "type": "object",
                    "properties": {
                      "base64": {
                        "type": "string",
                        "description": "Base64-encoded file data"
                      },
                      "mimeType": {
                        "type": "string",
                        "description": "The MIME type of the file (e.g., application/pdf)"
                      },
                      "filename": {
                        "type": "string",
                        "description": "The filename"
                      }
                    },
                    "required": [
                      "base64",
                      "mimeType"
                    ],
                    "description": "Optional file data to include with the message"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Message queued",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "string",
                      "description": "Agent response text"
                    },
                    "sessionId": {
                      "type": "string",
                      "description": "Session ID used for this message"
                    }
                  },
                  "required": [
                    "response",
                    "sessionId"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/api/message-sync": {
      "post": {
        "summary": "Send Message (sync)",
        "description": "Sends a message and waits for the full response",
        "tags": [
          "messages"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "The user message text"
                  },
                  "sessionId": {
                    "type": "string",
                    "description": "The session to use for this message"
                  },
                  "stream": {
                    "type": "boolean",
                    "description": "Set to true to receive streaming chunks over WebSocket"
                  },
                  "imageData": {
                    "type": "object",
                    "properties": {
                      "base64": {
                        "type": "string",
                        "description": "Base64-encoded image data"
                      },
                      "mimeType": {
                        "type": "string",
                        "description": "The MIME type of the image (e.g., image/png)"
                      }
                    },
                    "required": [
                      "base64",
                      "mimeType"
                    ],
                    "description": "Optional image data to include with the message"
                  },
                  "fileData": {
                    "type": "object",
                    "properties": {
                      "base64": {
                        "type": "string",
                        "description": "Base64-encoded file data"
                      },
                      "mimeType": {
                        "type": "string",
                        "description": "The MIME type of the file (e.g., application/pdf)"
                      },
                      "filename": {
                        "type": "string",
                        "description": "The filename"
                      }
                    },
                    "required": [
                      "base64",
                      "mimeType"
                    ],
                    "description": "Optional file data to include with the message"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Synchronous response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "string",
                      "description": "Agent response text"
                    },
                    "sessionId": {
                      "type": "string",
                      "description": "Session ID used for this message"
                    }
                  },
                  "required": [
                    "response",
                    "sessionId"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/api/reset": {
      "post": {
        "summary": "Reset Conversation",
        "description": "Resets the conversation history for a given session",
        "tags": [
          "messages"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionId": {
                    "type": "string",
                    "description": "The ID of the session to reset"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset initiated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status message indicating reset was initiated"
                    },
                    "sessionId": {
                      "type": "string",
                      "description": "Session ID that was reset (if specified)"
                    }
                  },
                  "required": [
                    "status"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/llm/current": {
      "get": {
        "summary": "Get Current LLM Config",
        "description": "Retrieves the current LLM configuration for the agent or a specific session",
        "tags": [
          "llm"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Session identifier to retrieve session-specific LLM configuration"
            },
            "required": false,
            "description": "Session identifier to retrieve session-specific LLM configuration",
            "name": "sessionId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Current LLM config",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "config": {
                      "type": "object",
                      "properties": {
                        "provider": {
                          "type": "string",
                          "enum": [
                            "openai",
                            "openai-compatible",
                            "anthropic",
                            "google",
                            "groq",
                            "xai",
                            "cohere"
                          ],
                          "description": "LLM provider (e.g., 'openai', 'anthropic', 'google', 'groq')"
                        },
                        "model": {
                          "type": "string",
                          "description": "Specific model name for the selected provider"
                        },
                        "apiKey": {
                          "type": "string",
                          "description": "API key for provider; can be given directly or via $ENV reference"
                        },
                        "maxIterations": {
                          "type": "integer",
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "default": 50
                        },
                        "router": {
                          "type": "string",
                          "enum": [
                            "vercel",
                            "in-built"
                          ],
                          "default": "vercel"
                        },
                        "baseURL": {
                          "type": "string",
                          "description": "Base URL for provider (e.g., https://api.openai.com/v1). Only certain providers support this."
                        },
                        "maxInputTokens": {
                          "type": "integer",
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "description": "Max input tokens for history; required for unknown models"
                        },
                        "maxOutputTokens": {
                          "type": "integer",
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "description": "Max tokens for model output"
                        },
                        "temperature": {
                          "type": "number",
                          "nullable": true,
                          "minimum": 0,
                          "maximum": 1,
                          "description": "Randomness: 0 deterministic, 1 creative"
                        },
                        "allowedMediaTypes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "MIME type patterns for media expansion (e.g., \"image/*\", \"application/pdf\"). If omitted, uses model capabilities from registry. Supports wildcards."
                        },
                        "displayName": {
                          "type": "string",
                          "description": "Human-readable model display name"
                        }
                      },
                      "required": [
                        "provider",
                        "model",
                        "apiKey"
                      ],
                      "additionalProperties": false,
                      "description": "Current LLM configuration"
                    }
                  },
                  "required": [
                    "config"
                  ],
                  "description": "Response containing current LLM configuration"
                }
              }
            }
          }
        }
      }
    },
    "/api/llm/catalog": {
      "get": {
        "summary": "LLM Catalog",
        "description": "Providers, models, capabilities, and API key status",
        "tags": [
          "llm"
        ],
        "parameters": [
          {
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "description": "Comma-separated list of LLM providers to filter by"
            },
            "required": false,
            "description": "Comma-separated list of LLM providers to filter by",
            "name": "provider",
            "in": "query"
          },
          {
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "true"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "false"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "1"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "0"
                  ]
                }
              ],
              "description": "Filter by API key presence (true or false)"
            },
            "required": false,
            "description": "Filter by API key presence (true or false)",
            "name": "hasKey",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "vercel",
                "in-built"
              ],
              "description": "Filter by router type (vercel or in-built)"
            },
            "required": false,
            "description": "Filter by router type (vercel or in-built)",
            "name": "router",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "pdf",
                "image",
                "audio"
              ],
              "description": "Filter by supported file type (audio, pdf, or image)"
            },
            "required": false,
            "description": "Filter by supported file type (audio, pdf, or image)",
            "name": "fileType",
            "in": "query"
          },
          {
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "true"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "false"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "1"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "0"
                  ]
                }
              ],
              "description": "Include only default models (true or false)"
            },
            "required": false,
            "description": "Include only default models (true or false)",
            "name": "defaultOnly",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "grouped",
                "flat"
              ],
              "default": "grouped",
              "description": "Response format mode (grouped by provider or flat list)"
            },
            "required": false,
            "description": "Response format mode (grouped by provider or flat list)",
            "name": "mode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "LLM catalog",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "providers": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Provider display name"
                              },
                              "hasApiKey": {
                                "type": "boolean",
                                "description": "Whether API key is configured"
                              },
                              "primaryEnvVar": {
                                "type": "string",
                                "description": "Primary environment variable for API key"
                              },
                              "supportedRouters": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "vercel",
                                    "in-built"
                                  ]
                                },
                                "description": "Routing strategies supported by this provider"
                              },
                              "supportsBaseURL": {
                                "type": "boolean",
                                "description": "Whether custom base URLs are supported"
                              },
                              "models": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "Model name identifier"
                                    },
                                    "maxInputTokens": {
                                      "type": "integer",
                                      "minimum": 0,
                                      "exclusiveMinimum": true,
                                      "description": "Maximum input tokens"
                                    },
                                    "default": {
                                      "type": "boolean",
                                      "description": "Whether this is a default model"
                                    },
                                    "supportedFileTypes": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "audio",
                                          "pdf",
                                          "image"
                                        ]
                                      },
                                      "description": "File types this model supports"
                                    },
                                    "supportedRouters": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "vercel",
                                          "in-built"
                                        ]
                                      },
                                      "description": "Routing strategies this model supports"
                                    },
                                    "displayName": {
                                      "type": "string",
                                      "description": "Human-readable display name"
                                    },
                                    "pricing": {
                                      "type": "object",
                                      "properties": {
                                        "inputPerM": {
                                          "type": "number",
                                          "description": "Input cost per million tokens (USD)"
                                        },
                                        "outputPerM": {
                                          "type": "number",
                                          "description": "Output cost per million tokens (USD)"
                                        },
                                        "cacheReadPerM": {
                                          "type": "number",
                                          "description": "Cache read cost per million tokens"
                                        },
                                        "cacheWritePerM": {
                                          "type": "number",
                                          "description": "Cache write cost per million tokens"
                                        },
                                        "currency": {
                                          "type": "string",
                                          "enum": [
                                            "USD"
                                          ],
                                          "description": "Currency"
                                        },
                                        "unit": {
                                          "type": "string",
                                          "enum": [
                                            "per_million_tokens"
                                          ],
                                          "description": "Unit"
                                        }
                                      },
                                      "required": [
                                        "inputPerM",
                                        "outputPerM"
                                      ],
                                      "description": "Pricing information in USD per million tokens"
                                    }
                                  },
                                  "required": [
                                    "name",
                                    "maxInputTokens",
                                    "supportedFileTypes"
                                  ],
                                  "additionalProperties": false,
                                  "description": "Model information from LLM registry"
                                },
                                "description": "Models available from this provider"
                              },
                              "supportedFileTypes": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "audio",
                                    "pdf",
                                    "image"
                                  ]
                                },
                                "description": "Provider-level file type support"
                              }
                            },
                            "required": [
                              "name",
                              "hasApiKey",
                              "primaryEnvVar",
                              "supportedRouters",
                              "supportsBaseURL",
                              "models",
                              "supportedFileTypes"
                            ],
                            "additionalProperties": false,
                            "description": "Provider catalog entry with models and capabilities"
                          },
                          "description": "Providers grouped by ID with their models and capabilities"
                        }
                      },
                      "required": [
                        "providers"
                      ],
                      "additionalProperties": false,
                      "description": "Grouped catalog response (mode=grouped)"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "models": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Model name identifier"
                              },
                              "maxInputTokens": {
                                "type": "integer",
                                "minimum": 0,
                                "exclusiveMinimum": true,
                                "description": "Maximum input tokens"
                              },
                              "default": {
                                "type": "boolean",
                                "description": "Whether this is a default model"
                              },
                              "supportedFileTypes": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "audio",
                                    "pdf",
                                    "image"
                                  ]
                                },
                                "description": "File types this model supports"
                              },
                              "supportedRouters": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "vercel",
                                    "in-built"
                                  ]
                                },
                                "description": "Routing strategies this model supports"
                              },
                              "displayName": {
                                "type": "string",
                                "description": "Human-readable display name"
                              },
                              "pricing": {
                                "type": "object",
                                "properties": {
                                  "inputPerM": {
                                    "type": "number",
                                    "description": "Input cost per million tokens (USD)"
                                  },
                                  "outputPerM": {
                                    "type": "number",
                                    "description": "Output cost per million tokens (USD)"
                                  },
                                  "cacheReadPerM": {
                                    "type": "number",
                                    "description": "Cache read cost per million tokens"
                                  },
                                  "cacheWritePerM": {
                                    "type": "number",
                                    "description": "Cache write cost per million tokens"
                                  },
                                  "currency": {
                                    "type": "string",
                                    "enum": [
                                      "USD"
                                    ],
                                    "description": "Currency"
                                  },
                                  "unit": {
                                    "type": "string",
                                    "enum": [
                                      "per_million_tokens"
                                    ],
                                    "description": "Unit"
                                  }
                                },
                                "required": [
                                  "inputPerM",
                                  "outputPerM"
                                ],
                                "description": "Pricing information in USD per million tokens"
                              },
                              "provider": {
                                "type": "string",
                                "description": "Provider identifier for this model"
                              }
                            },
                            "required": [
                              "name",
                              "maxInputTokens",
                              "supportedFileTypes",
                              "provider"
                            ],
                            "additionalProperties": false,
                            "description": "Flattened model entry with provider information"
                          },
                          "description": "Flat list of all models with provider information"
                        }
                      },
                      "required": [
                        "models"
                      ],
                      "additionalProperties": false,
                      "description": "Flat catalog response (mode=flat)"
                    }
                  ],
                  "description": "LLM catalog in grouped or flat format based on mode query parameter"
                }
              }
            }
          }
        }
      }
    },
    "/api/llm/key": {
      "post": {
        "summary": "Save Provider API Key",
        "description": "Stores an API key for a provider in .env and makes it available immediately",
        "tags": [
          "llm"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "provider": {
                    "type": "string",
                    "enum": [
                      "openai",
                      "openai-compatible",
                      "anthropic",
                      "google",
                      "groq",
                      "xai",
                      "cohere"
                    ],
                    "description": "LLM provider identifier (e.g., openai, anthropic)"
                  },
                  "apiKey": {
                    "type": "string",
                    "minLength": 1,
                    "description": "API key for the provider"
                  }
                },
                "required": [
                  "provider",
                  "apiKey"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "API key saved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        true
                      ],
                      "description": "Operation success indicator"
                    },
                    "provider": {
                      "type": "string",
                      "enum": [
                        "openai",
                        "openai-compatible",
                        "anthropic",
                        "google",
                        "groq",
                        "xai",
                        "cohere"
                      ],
                      "description": "Provider for which the key was saved"
                    },
                    "envVar": {
                      "type": "string",
                      "description": "Environment variable name where key was stored"
                    }
                  },
                  "required": [
                    "ok",
                    "provider",
                    "envVar"
                  ],
                  "additionalProperties": false,
                  "description": "API key save response"
                }
              }
            }
          }
        }
      }
    },
    "/api/llm/switch": {
      "post": {
        "summary": "Switch LLM",
        "description": "Switches the LLM configuration for the agent or a specific session",
        "tags": [
          "llm"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "sessionId": {
                        "type": "string",
                        "description": "Session identifier for session-specific LLM configuration"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "provider": {
                        "type": "string",
                        "enum": [
                          "openai",
                          "openai-compatible",
                          "anthropic",
                          "google",
                          "groq",
                          "xai",
                          "cohere"
                        ],
                        "description": "LLM provider (e.g., 'openai', 'anthropic', 'google', 'groq')"
                      },
                      "model": {
                        "type": "string",
                        "description": "Specific model name for the selected provider"
                      },
                      "apiKey": {
                        "type": "string",
                        "description": "API key for provider; can be given directly or via $ENV reference"
                      },
                      "maxIterations": {
                        "type": "integer",
                        "minimum": 0,
                        "exclusiveMinimum": true,
                        "description": "Max iterations for agentic loops"
                      },
                      "router": {
                        "type": "string",
                        "enum": [
                          "vercel",
                          "in-built"
                        ],
                        "description": "Router to use (vercel | in-built)"
                      },
                      "baseURL": {
                        "type": "string",
                        "description": "Base URL for provider (e.g., https://api.openai.com/v1). Only certain providers support this."
                      },
                      "maxInputTokens": {
                        "type": "integer",
                        "minimum": 0,
                        "exclusiveMinimum": true,
                        "description": "Max input tokens for history; required for unknown models"
                      },
                      "maxOutputTokens": {
                        "type": "integer",
                        "minimum": 0,
                        "exclusiveMinimum": true,
                        "description": "Max tokens for model output"
                      },
                      "temperature": {
                        "type": "number",
                        "nullable": true,
                        "minimum": 0,
                        "maximum": 1,
                        "description": "Randomness: 0 deterministic, 1 creative"
                      },
                      "allowedMediaTypes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "MIME type patterns for media expansion (e.g., \"image/*\", \"application/pdf\"). If omitted, uses model capabilities from registry. Supports wildcards."
                      }
                    },
                    "additionalProperties": false
                  }
                ],
                "description": "LLM switch request body with optional session ID"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "LLM switch result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "config": {
                      "type": "object",
                      "properties": {
                        "provider": {
                          "type": "string",
                          "enum": [
                            "openai",
                            "openai-compatible",
                            "anthropic",
                            "google",
                            "groq",
                            "xai",
                            "cohere"
                          ],
                          "description": "LLM provider (e.g., 'openai', 'anthropic', 'google', 'groq')"
                        },
                        "model": {
                          "type": "string",
                          "description": "Specific model name for the selected provider"
                        },
                        "apiKey": {
                          "type": "string",
                          "description": "API key for provider; can be given directly or via $ENV reference"
                        },
                        "maxIterations": {
                          "type": "integer",
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "default": 50
                        },
                        "router": {
                          "type": "string",
                          "enum": [
                            "vercel",
                            "in-built"
                          ],
                          "default": "vercel"
                        },
                        "baseURL": {
                          "type": "string",
                          "description": "Base URL for provider (e.g., https://api.openai.com/v1). Only certain providers support this."
                        },
                        "maxInputTokens": {
                          "type": "integer",
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "description": "Max input tokens for history; required for unknown models"
                        },
                        "maxOutputTokens": {
                          "type": "integer",
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "description": "Max tokens for model output"
                        },
                        "temperature": {
                          "type": "number",
                          "nullable": true,
                          "minimum": 0,
                          "maximum": 1,
                          "description": "Randomness: 0 deterministic, 1 creative"
                        },
                        "allowedMediaTypes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "MIME type patterns for media expansion (e.g., \"image/*\", \"application/pdf\"). If omitted, uses model capabilities from registry. Supports wildcards."
                        }
                      },
                      "required": [
                        "provider",
                        "model",
                        "apiKey"
                      ],
                      "additionalProperties": false,
                      "description": "New LLM configuration with all defaults applied"
                    },
                    "sessionId": {
                      "type": "string",
                      "description": "Session ID if session-specific switch"
                    }
                  },
                  "required": [
                    "config"
                  ],
                  "description": "LLM switch result"
                }
              }
            }
          }
        }
      }
    },
    "/api/sessions": {
      "get": {
        "summary": "List Sessions",
        "description": "Retrieves a list of all active sessions",
        "tags": [
          "sessions"
        ],
        "responses": {
          "200": {
            "description": "List of all active sessions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sessions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique session identifier"
                          },
                          "createdAt": {
                            "type": "integer",
                            "nullable": true,
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "description": "Creation timestamp (Unix ms, null if unavailable)"
                          },
                          "lastActivity": {
                            "type": "integer",
                            "nullable": true,
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "description": "Last activity timestamp (Unix ms, null if unavailable)"
                          },
                          "messageCount": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Total number of messages in session"
                          },
                          "title": {
                            "type": "string",
                            "nullable": true,
                            "description": "Optional session title"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "lastActivity",
                          "messageCount"
                        ],
                        "additionalProperties": false,
                        "description": "Session metadata"
                      },
                      "description": "Array of session metadata objects"
                    }
                  },
                  "required": [
                    "sessions"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Session",
        "description": "Creates a new session",
        "tags": [
          "sessions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionId": {
                    "type": "string",
                    "description": "A custom ID for the new session"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "session": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique session identifier"
                        },
                        "createdAt": {
                          "type": "integer",
                          "nullable": true,
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "description": "Creation timestamp (Unix ms, null if unavailable)"
                        },
                        "lastActivity": {
                          "type": "integer",
                          "nullable": true,
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "description": "Last activity timestamp (Unix ms, null if unavailable)"
                        },
                        "messageCount": {
                          "type": "integer",
                          "minimum": 0,
                          "description": "Total number of messages in session"
                        },
                        "title": {
                          "type": "string",
                          "nullable": true,
                          "description": "Optional session title"
                        }
                      },
                      "required": [
                        "id",
                        "createdAt",
                        "lastActivity",
                        "messageCount"
                      ],
                      "additionalProperties": false,
                      "description": "Newly created session metadata"
                    }
                  },
                  "required": [
                    "session"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/sessions/current": {
      "get": {
        "summary": "Get Current Session",
        "description": "Retrieves the ID of the currently active session",
        "tags": [
          "sessions"
        ],
        "responses": {
          "200": {
            "description": "Current active session ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currentSessionId": {
                      "type": "string",
                      "nullable": true,
                      "description": "ID of the current session, or null if none"
                    }
                  },
                  "required": [
                    "currentSessionId"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/sessions/{sessionId}": {
      "get": {
        "summary": "Get Session Details",
        "description": "Fetches details for a specific session",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Session identifier"
            },
            "required": true,
            "description": "Session identifier",
            "name": "sessionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Session details with metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "session": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique session identifier"
                        },
                        "createdAt": {
                          "type": "integer",
                          "nullable": true,
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "description": "Creation timestamp (Unix ms, null if unavailable)"
                        },
                        "lastActivity": {
                          "type": "integer",
                          "nullable": true,
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "description": "Last activity timestamp (Unix ms, null if unavailable)"
                        },
                        "messageCount": {
                          "type": "integer",
                          "minimum": 0,
                          "description": "Total number of messages in session"
                        },
                        "title": {
                          "type": "string",
                          "nullable": true,
                          "description": "Optional session title"
                        },
                        "history": {
                          "type": "integer",
                          "minimum": 0,
                          "description": "Number of messages in history"
                        }
                      },
                      "required": [
                        "id",
                        "createdAt",
                        "lastActivity",
                        "messageCount",
                        "history"
                      ],
                      "additionalProperties": false,
                      "description": "Session metadata with history count"
                    }
                  },
                  "required": [
                    "session"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Session",
        "description": "Permanently deletes a session and all its conversation history. This action cannot be undone",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Session identifier"
            },
            "required": true,
            "description": "Session identifier",
            "name": "sessionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Session deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "deleted"
                      ],
                      "description": "Deletion status"
                    },
                    "sessionId": {
                      "type": "string",
                      "description": "ID of the deleted session"
                    }
                  },
                  "required": [
                    "status",
                    "sessionId"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update Session Title",
        "description": "Updates the title of an existing session",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Session identifier"
            },
            "required": true,
            "description": "Session identifier",
            "name": "sessionId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 120,
                    "description": "New title for the session (maximum 120 characters)"
                  }
                },
                "required": [
                  "title"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "session": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique session identifier"
                        },
                        "createdAt": {
                          "type": "integer",
                          "nullable": true,
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "description": "Creation timestamp (Unix ms, null if unavailable)"
                        },
                        "lastActivity": {
                          "type": "integer",
                          "nullable": true,
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "description": "Last activity timestamp (Unix ms, null if unavailable)"
                        },
                        "messageCount": {
                          "type": "integer",
                          "minimum": 0,
                          "description": "Total number of messages in session"
                        },
                        "title": {
                          "type": "string",
                          "nullable": true,
                          "description": "Optional session title"
                        }
                      },
                      "required": [
                        "id",
                        "createdAt",
                        "lastActivity",
                        "messageCount"
                      ],
                      "additionalProperties": false,
                      "description": "Updated session metadata"
                    }
                  },
                  "required": [
                    "session"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/sessions/{sessionId}/history": {
      "get": {
        "summary": "Get Session History",
        "description": "Retrieves the conversation history for a session",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Session identifier"
            },
            "required": true,
            "description": "Session identifier",
            "name": "sessionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Session conversation history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "history": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "role": {
                            "type": "string",
                            "enum": [
                              "system",
                              "user",
                              "assistant",
                              "tool"
                            ],
                            "description": "Role of the message sender"
                          },
                          "timestamp": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "description": "Creation timestamp (Unix ms)"
                          },
                          "content": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "nullable": true
                              },
                              {
                                "type": "array",
                                "items": {
                                  "oneOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "text"
                                          ],
                                          "description": "Part type: text"
                                        },
                                        "text": {
                                          "type": "string",
                                          "description": "Text content"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "text"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Text content part"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "image"
                                          ],
                                          "description": "Part type: image"
                                        },
                                        "image": {
                                          "description": "Image data (string, binary, or URL)"
                                        },
                                        "mimeType": {
                                          "type": "string",
                                          "description": "MIME type of the image"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "image"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Image content part"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "file"
                                          ],
                                          "description": "Part type: file"
                                        },
                                        "data": {
                                          "description": "File data (string, binary, or URL)"
                                        },
                                        "mimeType": {
                                          "type": "string",
                                          "description": "MIME type of the file"
                                        },
                                        "filename": {
                                          "type": "string",
                                          "description": "Optional filename"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "data",
                                        "mimeType"
                                      ],
                                      "additionalProperties": false,
                                      "description": "File content part"
                                    }
                                  ],
                                  "description": "Message content part (text, image, or file)"
                                }
                              },
                              {
                                "nullable": true
                              }
                            ],
                            "description": "Message content (string, null, or array of parts)"
                          },
                          "reasoning": {
                            "type": "string",
                            "description": "Optional model reasoning text"
                          },
                          "tokenUsage": {
                            "type": "object",
                            "properties": {
                              "inputTokens": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "Number of input tokens"
                              },
                              "outputTokens": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "Number of output tokens"
                              },
                              "reasoningTokens": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "Number of reasoning tokens"
                              },
                              "totalTokens": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "Total tokens used"
                              }
                            },
                            "additionalProperties": false,
                            "description": "Optional token usage accounting"
                          },
                          "model": {
                            "type": "string",
                            "description": "Model identifier for assistant messages"
                          },
                          "provider": {
                            "type": "string",
                            "description": "Provider identifier for assistant messages"
                          },
                          "router": {
                            "type": "string",
                            "description": "Router metadata for assistant messages"
                          },
                          "toolCalls": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "Unique identifier for this tool call"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "function"
                                  ],
                                  "description": "Tool call type (currently only function is supported)"
                                },
                                "function": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "Name of the function to call"
                                    },
                                    "arguments": {
                                      "type": "string",
                                      "description": "Arguments for the function in JSON string format"
                                    }
                                  },
                                  "required": [
                                    "name",
                                    "arguments"
                                  ],
                                  "additionalProperties": false,
                                  "description": "Function call details"
                                }
                              },
                              "required": [
                                "id",
                                "type",
                                "function"
                              ],
                              "additionalProperties": false,
                              "description": "Tool call made by the assistant"
                            },
                            "description": "Tool calls made by the assistant"
                          },
                          "toolCallId": {
                            "type": "string",
                            "description": "ID of the tool call this message responds to"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the tool that produced this result"
                          }
                        },
                        "required": [
                          "role",
                          "content"
                        ],
                        "additionalProperties": false,
                        "description": "Internal message representation"
                      },
                      "description": "Array of messages in conversation history"
                    }
                  },
                  "required": [
                    "history"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/sessions/{sessionId}/cancel": {
      "post": {
        "summary": "Cancel Session Run",
        "description": "Cancels an in-flight agent run for the specified session",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Session identifier"
            },
            "required": true,
            "description": "Session identifier",
            "name": "sessionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Cancel operation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cancelled": {
                      "type": "boolean",
                      "description": "Whether a run was cancelled"
                    },
                    "sessionId": {
                      "type": "string",
                      "description": "Session ID"
                    }
                  },
                  "required": [
                    "cancelled",
                    "sessionId"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/sessions/{sessionId}/load": {
      "post": {
        "summary": "Load Session",
        "description": "Sets a session as the current active session",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Session identifier"
            },
            "required": true,
            "description": "Session identifier",
            "name": "sessionId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session loaded or reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "loaded",
                        "reset"
                      ],
                      "description": "Operation status"
                    },
                    "sessionId": {
                      "type": "string",
                      "nullable": true,
                      "description": "Loaded session ID or null if reset"
                    },
                    "currentSession": {
                      "type": "string",
                      "nullable": true,
                      "description": "Current active session ID"
                    }
                  },
                  "required": [
                    "status",
                    "sessionId",
                    "currentSession"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/search/messages": {
      "get": {
        "summary": "Search Messages",
        "description": "Searches for messages across all sessions or within a specific session",
        "tags": [
          "search"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Search query string"
            },
            "required": true,
            "description": "Search query string",
            "name": "q",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "Maximum number of results to return (default: 20)"
            },
            "required": false,
            "description": "Maximum number of results to return (default: 20)",
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "nullable": true,
              "minimum": 0,
              "description": "Number of results to skip for pagination (default: 0)"
            },
            "required": false,
            "description": "Number of results to skip for pagination (default: 0)",
            "name": "offset",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "description": "Limit search to a specific session"
            },
            "required": false,
            "description": "Limit search to a specific session",
            "name": "sessionId",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "assistant",
                "system",
                "tool"
              ],
              "description": "Filter by message role"
            },
            "required": false,
            "description": "Filter by message role",
            "name": "role",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Message search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "sessionId": {
                            "type": "string",
                            "description": "Session ID where the message was found"
                          },
                          "message": {
                            "type": "object",
                            "properties": {
                              "role": {
                                "type": "string",
                                "enum": [
                                  "system",
                                  "user",
                                  "assistant",
                                  "tool"
                                ],
                                "description": "Role of the message sender"
                              },
                              "timestamp": {
                                "type": "integer",
                                "minimum": 0,
                                "exclusiveMinimum": true,
                                "description": "Creation timestamp (Unix ms)"
                              },
                              "content": {
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "nullable": true
                                  },
                                  {
                                    "type": "array",
                                    "items": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "text"
                                              ],
                                              "description": "Part type: text"
                                            },
                                            "text": {
                                              "type": "string",
                                              "description": "Text content"
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "text"
                                          ],
                                          "additionalProperties": false,
                                          "description": "Text content part"
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "image"
                                              ],
                                              "description": "Part type: image"
                                            },
                                            "image": {
                                              "description": "Image data (string, binary, or URL)"
                                            },
                                            "mimeType": {
                                              "type": "string",
                                              "description": "MIME type of the image"
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "image"
                                          ],
                                          "additionalProperties": false,
                                          "description": "Image content part"
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "file"
                                              ],
                                              "description": "Part type: file"
                                            },
                                            "data": {
                                              "description": "File data (string, binary, or URL)"
                                            },
                                            "mimeType": {
                                              "type": "string",
                                              "description": "MIME type of the file"
                                            },
                                            "filename": {
                                              "type": "string",
                                              "description": "Optional filename"
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "data",
                                            "mimeType"
                                          ],
                                          "additionalProperties": false,
                                          "description": "File content part"
                                        }
                                      ],
                                      "description": "Message content part (text, image, or file)"
                                    }
                                  },
                                  {
                                    "nullable": true
                                  }
                                ],
                                "description": "Message content (string, null, or array of parts)"
                              },
                              "reasoning": {
                                "type": "string",
                                "description": "Optional model reasoning text"
                              },
                              "tokenUsage": {
                                "type": "object",
                                "properties": {
                                  "inputTokens": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "description": "Number of input tokens"
                                  },
                                  "outputTokens": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "description": "Number of output tokens"
                                  },
                                  "reasoningTokens": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "description": "Number of reasoning tokens"
                                  },
                                  "totalTokens": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "description": "Total tokens used"
                                  }
                                },
                                "additionalProperties": false,
                                "description": "Optional token usage accounting"
                              },
                              "model": {
                                "type": "string",
                                "description": "Model identifier for assistant messages"
                              },
                              "provider": {
                                "type": "string",
                                "description": "Provider identifier for assistant messages"
                              },
                              "router": {
                                "type": "string",
                                "description": "Router metadata for assistant messages"
                              },
                              "toolCalls": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "Unique identifier for this tool call"
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "function"
                                      ],
                                      "description": "Tool call type (currently only function is supported)"
                                    },
                                    "function": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "Name of the function to call"
                                        },
                                        "arguments": {
                                          "type": "string",
                                          "description": "Arguments for the function in JSON string format"
                                        }
                                      },
                                      "required": [
                                        "name",
                                        "arguments"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Function call details"
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type",
                                    "function"
                                  ],
                                  "additionalProperties": false,
                                  "description": "Tool call made by the assistant"
                                },
                                "description": "Tool calls made by the assistant"
                              },
                              "toolCallId": {
                                "type": "string",
                                "description": "ID of the tool call this message responds to"
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the tool that produced this result"
                              }
                            },
                            "required": [
                              "role",
                              "content"
                            ],
                            "additionalProperties": false,
                            "description": "The message that matched the search"
                          },
                          "matchedText": {
                            "type": "string",
                            "description": "The specific text that matched the search query"
                          },
                          "context": {
                            "type": "string",
                            "description": "Context around the match for preview"
                          },
                          "messageIndex": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Index of the message within the session"
                          }
                        },
                        "required": [
                          "sessionId",
                          "message",
                          "matchedText",
                          "context",
                          "messageIndex"
                        ],
                        "additionalProperties": false,
                        "description": "Result of a message search"
                      },
                      "description": "Array of search results"
                    },
                    "total": {
                      "type": "integer",
                      "minimum": 0,
                      "description": "Total number of results available"
                    },
                    "hasMore": {
                      "type": "boolean",
                      "description": "Whether there are more results beyond the current page"
                    },
                    "query": {
                      "type": "string",
                      "description": "Query that was searched"
                    }
                  },
                  "required": [
                    "results",
                    "total",
                    "hasMore",
                    "query"
                  ],
                  "additionalProperties": false,
                  "description": "Message search response"
                }
              }
            }
          }
        }
      }
    },
    "/api/search/sessions": {
      "get": {
        "summary": "Search Sessions",
        "description": "Searches for sessions that contain the specified query",
        "tags": [
          "search"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Search query string"
            },
            "required": true,
            "description": "Search query string",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Session search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "sessionId": {
                            "type": "string",
                            "description": "Session ID"
                          },
                          "matchCount": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Number of messages that matched in this session"
                          },
                          "firstMatch": {
                            "type": "object",
                            "properties": {
                              "sessionId": {
                                "type": "string",
                                "description": "Session ID where the message was found"
                              },
                              "message": {
                                "type": "object",
                                "properties": {
                                  "role": {
                                    "type": "string",
                                    "enum": [
                                      "system",
                                      "user",
                                      "assistant",
                                      "tool"
                                    ],
                                    "description": "Role of the message sender"
                                  },
                                  "timestamp": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "exclusiveMinimum": true,
                                    "description": "Creation timestamp (Unix ms)"
                                  },
                                  "content": {
                                    "anyOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "nullable": true
                                      },
                                      {
                                        "type": "array",
                                        "items": {
                                          "oneOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "text"
                                                  ],
                                                  "description": "Part type: text"
                                                },
                                                "text": {
                                                  "type": "string",
                                                  "description": "Text content"
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "text"
                                              ],
                                              "additionalProperties": false,
                                              "description": "Text content part"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "image"
                                                  ],
                                                  "description": "Part type: image"
                                                },
                                                "image": {
                                                  "description": "Image data (string, binary, or URL)"
                                                },
                                                "mimeType": {
                                                  "type": "string",
                                                  "description": "MIME type of the image"
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "image"
                                              ],
                                              "additionalProperties": false,
                                              "description": "Image content part"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "file"
                                                  ],
                                                  "description": "Part type: file"
                                                },
                                                "data": {
                                                  "description": "File data (string, binary, or URL)"
                                                },
                                                "mimeType": {
                                                  "type": "string",
                                                  "description": "MIME type of the file"
                                                },
                                                "filename": {
                                                  "type": "string",
                                                  "description": "Optional filename"
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "data",
                                                "mimeType"
                                              ],
                                              "additionalProperties": false,
                                              "description": "File content part"
                                            }
                                          ],
                                          "description": "Message content part (text, image, or file)"
                                        }
                                      },
                                      {
                                        "nullable": true
                                      }
                                    ],
                                    "description": "Message content (string, null, or array of parts)"
                                  },
                                  "reasoning": {
                                    "type": "string",
                                    "description": "Optional model reasoning text"
                                  },
                                  "tokenUsage": {
                                    "type": "object",
                                    "properties": {
                                      "inputTokens": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "description": "Number of input tokens"
                                      },
                                      "outputTokens": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "description": "Number of output tokens"
                                      },
                                      "reasoningTokens": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "description": "Number of reasoning tokens"
                                      },
                                      "totalTokens": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "description": "Total tokens used"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "description": "Optional token usage accounting"
                                  },
                                  "model": {
                                    "type": "string",
                                    "description": "Model identifier for assistant messages"
                                  },
                                  "provider": {
                                    "type": "string",
                                    "description": "Provider identifier for assistant messages"
                                  },
                                  "router": {
                                    "type": "string",
                                    "description": "Router metadata for assistant messages"
                                  },
                                  "toolCalls": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "description": "Unique identifier for this tool call"
                                        },
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "function"
                                          ],
                                          "description": "Tool call type (currently only function is supported)"
                                        },
                                        "function": {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "description": "Name of the function to call"
                                            },
                                            "arguments": {
                                              "type": "string",
                                              "description": "Arguments for the function in JSON string format"
                                            }
                                          },
                                          "required": [
                                            "name",
                                            "arguments"
                                          ],
                                          "additionalProperties": false,
                                          "description": "Function call details"
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type",
                                        "function"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Tool call made by the assistant"
                                    },
                                    "description": "Tool calls made by the assistant"
                                  },
                                  "toolCallId": {
                                    "type": "string",
                                    "description": "ID of the tool call this message responds to"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name of the tool that produced this result"
                                  }
                                },
                                "required": [
                                  "role",
                                  "content"
                                ],
                                "additionalProperties": false,
                                "description": "The message that matched the search"
                              },
                              "matchedText": {
                                "type": "string",
                                "description": "The specific text that matched the search query"
                              },
                              "context": {
                                "type": "string",
                                "description": "Context around the match for preview"
                              },
                              "messageIndex": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "Index of the message within the session"
                              }
                            },
                            "required": [
                              "sessionId",
                              "message",
                              "matchedText",
                              "context",
                              "messageIndex"
                            ],
                            "additionalProperties": false,
                            "description": "Preview of the first matching message"
                          },
                          "metadata": {
                            "type": "object",
                            "properties": {
                              "createdAt": {
                                "type": "integer",
                                "minimum": 0,
                                "exclusiveMinimum": true,
                                "description": "Session creation timestamp"
                              },
                              "lastActivity": {
                                "type": "integer",
                                "minimum": 0,
                                "exclusiveMinimum": true,
                                "description": "Last activity timestamp"
                              },
                              "messageCount": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "Total messages in session"
                              }
                            },
                            "required": [
                              "createdAt",
                              "lastActivity",
                              "messageCount"
                            ],
                            "additionalProperties": false,
                            "description": "Session metadata"
                          }
                        },
                        "required": [
                          "sessionId",
                          "matchCount",
                          "firstMatch",
                          "metadata"
                        ],
                        "additionalProperties": false,
                        "description": "Result of a session search"
                      },
                      "description": "Array of session search results"
                    },
                    "total": {
                      "type": "integer",
                      "minimum": 0,
                      "description": "Total number of sessions with matches"
                    },
                    "hasMore": {
                      "type": "boolean",
                      "description": "Whether there are more results beyond the current page"
                    },
                    "query": {
                      "type": "string",
                      "description": "Query that was searched"
                    }
                  },
                  "required": [
                    "results",
                    "total",
                    "hasMore",
                    "query"
                  ],
                  "additionalProperties": false,
                  "description": "Session search response"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/servers": {
      "post": {
        "summary": "Add MCP Server",
        "description": "Connects a new MCP server dynamically",
        "tags": [
          "mcp"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "A unique name for the server"
                  },
                  "config": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "stdio"
                            ]
                          },
                          "command": {
                            "type": "string"
                          },
                          "args": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "default": [],
                            "description": "Array of arguments for the command (e.g., ['script.js'])"
                          },
                          "env": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "default": {},
                            "description": "Optional environment variables for the server process"
                          },
                          "timeout": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "default": 30000
                          },
                          "connectionMode": {
                            "type": "string",
                            "enum": [
                              "strict",
                              "lenient"
                            ],
                            "default": "lenient"
                          }
                        },
                        "required": [
                          "type",
                          "command"
                        ],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "sse"
                            ]
                          },
                          "url": {
                            "type": "string",
                            "description": "URL for the SSE server endpoint"
                          },
                          "headers": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "default": {}
                          },
                          "timeout": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "default": 30000
                          },
                          "connectionMode": {
                            "type": "string",
                            "enum": [
                              "strict",
                              "lenient"
                            ],
                            "default": "lenient"
                          }
                        },
                        "required": [
                          "type",
                          "url"
                        ],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "http"
                            ]
                          },
                          "url": {
                            "type": "string",
                            "description": "URL for the HTTP server"
                          },
                          "headers": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "default": {}
                          },
                          "timeout": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "default": 30000
                          },
                          "connectionMode": {
                            "type": "string",
                            "enum": [
                              "strict",
                              "lenient"
                            ],
                            "default": "lenient"
                          }
                        },
                        "required": [
                          "type",
                          "url"
                        ],
                        "additionalProperties": false
                      }
                    ],
                    "description": "The server configuration object"
                  },
                  "persistToAgent": {
                    "type": "boolean",
                    "description": "If true, saves the server to agent configuration file"
                  }
                },
                "required": [
                  "name",
                  "config"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Server connected",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Connection status"
                    },
                    "name": {
                      "type": "string",
                      "description": "Server name"
                    }
                  },
                  "required": [
                    "status",
                    "name"
                  ],
                  "additionalProperties": false,
                  "description": "Server status response"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List MCP Servers",
        "description": "Gets a list of all connected and failed MCP servers",
        "tags": [
          "mcp"
        ],
        "responses": {
          "200": {
            "description": "Servers list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "servers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Server identifier"
                          },
                          "name": {
                            "type": "string",
                            "description": "Server name"
                          },
                          "status": {
                            "type": "string",
                            "description": "Server status (connected or error)"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "status"
                        ],
                        "additionalProperties": false,
                        "description": "MCP server information"
                      },
                      "description": "Array of server information"
                    }
                  },
                  "required": [
                    "servers"
                  ],
                  "additionalProperties": false,
                  "description": "List of MCP servers"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/tools": {
      "get": {
        "summary": "List Server Tools",
        "description": "Retrieves the list of tools available on a specific MCP server",
        "tags": [
          "mcp"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The ID of the MCP server"
            },
            "required": true,
            "description": "The ID of the MCP server",
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Tools list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tools": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Tool identifier"
                          },
                          "name": {
                            "type": "string",
                            "description": "Tool name"
                          },
                          "description": {
                            "type": "string",
                            "description": "Tool description"
                          },
                          "inputSchema": {
                            "type": "object",
                            "additionalProperties": {
                              "nullable": true
                            },
                            "description": "JSON Schema for tool input parameters"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "inputSchema"
                        ],
                        "additionalProperties": false,
                        "description": "Tool information"
                      },
                      "description": "Array of available tools"
                    }
                  },
                  "required": [
                    "tools"
                  ],
                  "additionalProperties": false,
                  "description": "List of tools from MCP server"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}": {
      "delete": {
        "summary": "Remove MCP Server",
        "description": "Disconnects and removes an MCP server",
        "tags": [
          "mcp"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The ID of the MCP server"
            },
            "required": true,
            "description": "The ID of the MCP server",
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Disconnected",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "disconnected"
                      ],
                      "description": "Disconnection status"
                    },
                    "id": {
                      "type": "string",
                      "description": "Server identifier"
                    }
                  },
                  "required": [
                    "status",
                    "id"
                  ],
                  "additionalProperties": false,
                  "description": "Server disconnection response"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/restart": {
      "post": {
        "summary": "Restart MCP Server",
        "description": "Restarts a connected MCP server",
        "tags": [
          "mcp"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The ID of the MCP server"
            },
            "required": true,
            "description": "The ID of the MCP server",
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Server restarted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "restarted"
                      ],
                      "description": "Restart status"
                    },
                    "id": {
                      "type": "string",
                      "description": "Server identifier"
                    }
                  },
                  "required": [
                    "status",
                    "id"
                  ],
                  "additionalProperties": false,
                  "description": "Server restart response"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/tools/{toolName}/execute": {
      "post": {
        "summary": "Execute MCP Tool",
        "description": "Executes a tool on an MCP server directly",
        "tags": [
          "mcp"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The ID of the MCP server"
            },
            "required": true,
            "description": "The ID of the MCP server",
            "name": "serverId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The name of the tool to execute"
            },
            "required": true,
            "description": "The name of the tool to execute",
            "name": "toolName",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "nullable": true
                },
                "description": "Tool execution parameters as JSON object. The specific fields depend on the tool being executed and are defined by the tool's inputSchema."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tool executed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Whether tool execution succeeded"
                    },
                    "data": {
                      "nullable": true,
                      "description": "Tool execution result data"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message if execution failed"
                    }
                  },
                  "required": [
                    "success"
                  ],
                  "additionalProperties": false,
                  "description": "Tool execution response"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/resources": {
      "get": {
        "summary": "List Server Resources",
        "description": "Retrieves all resources available from a specific MCP server",
        "tags": [
          "mcp"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The ID of the MCP server"
            },
            "required": true,
            "description": "The ID of the MCP server",
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Server resources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Success indicator"
                    },
                    "resources": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "uri": {
                            "type": "string",
                            "description": "Resource URI"
                          },
                          "name": {
                            "type": "string",
                            "description": "Resource name"
                          },
                          "description": {
                            "type": "string",
                            "description": "Resource description"
                          },
                          "mimeType": {
                            "type": "string",
                            "description": "MIME type of the resource"
                          }
                        },
                        "required": [
                          "uri"
                        ],
                        "additionalProperties": false,
                        "description": "Resource metadata"
                      },
                      "description": "Array of available resources"
                    }
                  },
                  "required": [
                    "success",
                    "resources"
                  ],
                  "additionalProperties": false,
                  "description": "List of resources from MCP server"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/resources/{resourceId}/content": {
      "get": {
        "summary": "Read Server Resource Content",
        "description": "Reads content from a specific resource on an MCP server. This endpoint automatically constructs the qualified URI format (mcp:serverId:resourceId)",
        "tags": [
          "mcp"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The ID of the MCP server"
            },
            "required": true,
            "description": "The ID of the MCP server",
            "name": "serverId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The URI-encoded resource identifier on that server"
            },
            "required": true,
            "description": "The URI-encoded resource identifier on that server",
            "name": "resourceId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Success indicator"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "nullable": true,
                          "description": "Resource content data"
                        }
                      },
                      "additionalProperties": false,
                      "description": "Resource content"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ],
                  "additionalProperties": false,
                  "description": "Resource content response"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/webhooks": {
      "post": {
        "summary": "Register Webhook",
        "description": "Registers a new webhook endpoint to receive agent events",
        "tags": [
          "webhooks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "The URL to send webhook events to (must be a valid HTTP/HTTPS URL)"
                  },
                  "secret": {
                    "type": "string",
                    "description": "A secret key for HMAC signature verification"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the webhook for reference"
                  }
                },
                "required": [
                  "url"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Webhook registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "webhook": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique webhook identifier"
                        },
                        "url": {
                          "type": "string",
                          "format": "uri",
                          "description": "Webhook URL"
                        },
                        "description": {
                          "type": "string",
                          "description": "Webhook description"
                        },
                        "createdAt": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ],
                          "description": "Creation timestamp (Date or Unix ms)"
                        }
                      },
                      "required": [
                        "id",
                        "url",
                        "createdAt"
                      ],
                      "additionalProperties": false,
                      "description": "Registered webhook details"
                    }
                  },
                  "required": [
                    "webhook"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Webhooks",
        "description": "Retrieves a list of all registered webhooks",
        "tags": [
          "webhooks"
        ],
        "responses": {
          "200": {
            "description": "List webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "webhooks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique webhook identifier"
                          },
                          "url": {
                            "type": "string",
                            "format": "uri",
                            "description": "Webhook URL"
                          },
                          "description": {
                            "type": "string",
                            "description": "Webhook description"
                          },
                          "createdAt": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ],
                            "description": "Creation timestamp (Date or Unix ms)"
                          }
                        },
                        "required": [
                          "id",
                          "url",
                          "createdAt"
                        ],
                        "additionalProperties": false,
                        "description": "Webhook response object"
                      },
                      "description": "Array of registered webhooks"
                    }
                  },
                  "required": [
                    "webhooks"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/webhooks/{webhookId}": {
      "get": {
        "summary": "Get Webhook Details",
        "description": "Fetches details for a specific webhook",
        "tags": [
          "webhooks"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The webhook identifier"
            },
            "required": true,
            "description": "The webhook identifier",
            "name": "webhookId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "webhook": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique webhook identifier"
                        },
                        "url": {
                          "type": "string",
                          "format": "uri",
                          "description": "Webhook URL"
                        },
                        "description": {
                          "type": "string",
                          "description": "Webhook description"
                        },
                        "createdAt": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ],
                          "description": "Creation timestamp (Date or Unix ms)"
                        }
                      },
                      "required": [
                        "id",
                        "url",
                        "createdAt"
                      ],
                      "additionalProperties": false,
                      "description": "Webhook details"
                    }
                  },
                  "required": [
                    "webhook"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Webhook",
        "description": "Permanently removes a webhook endpoint. This action cannot be undone",
        "tags": [
          "webhooks"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The webhook identifier"
            },
            "required": true,
            "description": "The webhook identifier",
            "name": "webhookId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Removed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "removed"
                      ],
                      "description": "Operation status indicating successful removal"
                    },
                    "webhookId": {
                      "type": "string",
                      "description": "ID of the removed webhook"
                    }
                  },
                  "required": [
                    "status",
                    "webhookId"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/webhooks/{webhookId}/test": {
      "post": {
        "summary": "Test Webhook",
        "description": "Sends a sample event to test webhook connectivity and configuration",
        "tags": [
          "webhooks"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The webhook identifier"
            },
            "required": true,
            "description": "The webhook identifier",
            "name": "webhookId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Test result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "test": {
                      "type": "string",
                      "enum": [
                        "completed"
                      ],
                      "description": "Test status indicating completion"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "description": "Whether the webhook test succeeded"
                        },
                        "statusCode": {
                          "type": "number",
                          "description": "HTTP status code from webhook"
                        },
                        "responseTime": {
                          "type": "number",
                          "description": "Response time in milliseconds"
                        },
                        "error": {
                          "type": "string",
                          "description": "Error message if test failed"
                        }
                      },
                      "required": [
                        "success"
                      ],
                      "additionalProperties": false,
                      "description": "Test execution results"
                    }
                  },
                  "required": [
                    "test",
                    "result"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/prompts": {
      "get": {
        "summary": "List Prompts",
        "description": "Retrieves all available prompts, including both built-in and custom prompts",
        "tags": [
          "prompts"
        ],
        "responses": {
          "200": {
            "description": "List all prompts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prompts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Prompt name"
                          },
                          "title": {
                            "type": "string",
                            "description": "Prompt title"
                          },
                          "description": {
                            "type": "string",
                            "description": "Prompt description"
                          },
                          "arguments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Argument name"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Argument description"
                                },
                                "required": {
                                  "type": "boolean",
                                  "description": "Whether the argument is required"
                                }
                              },
                              "required": [
                                "name"
                              ],
                              "additionalProperties": false,
                              "description": "Prompt argument definition"
                            },
                            "description": "Array of argument definitions"
                          },
                          "source": {
                            "type": "string",
                            "enum": [
                              "mcp",
                              "file",
                              "starter",
                              "custom"
                            ],
                            "description": "Source of the prompt"
                          },
                          "metadata": {
                            "type": "object",
                            "additionalProperties": {
                              "nullable": true
                            },
                            "description": "Additional metadata"
                          }
                        },
                        "required": [
                          "name",
                          "source"
                        ],
                        "additionalProperties": false,
                        "description": "Enhanced prompt information"
                      },
                      "description": "Array of available prompts"
                    }
                  },
                  "required": [
                    "prompts"
                  ],
                  "additionalProperties": false,
                  "description": "Prompts list response"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/custom": {
      "post": {
        "summary": "Create Custom Prompt",
        "description": "Creates a new custom prompt with optional resource attachment. Maximum request size: 10MB",
        "tags": [
          "prompts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Unique name for the custom prompt"
                  },
                  "title": {
                    "type": "string",
                    "description": "Display title for the prompt"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of what the prompt does"
                  },
                  "content": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The prompt content text (can include {{argumentName}} placeholders)"
                  },
                  "arguments": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "minLength": 1,
                          "description": "Argument name"
                        },
                        "description": {
                          "type": "string",
                          "description": "Argument description"
                        },
                        "required": {
                          "type": "boolean",
                          "description": "Whether the argument is required"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "additionalProperties": false
                    },
                    "description": "Array of argument definitions"
                  },
                  "resource": {
                    "type": "object",
                    "properties": {
                      "base64": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Base64-encoded resource data"
                      },
                      "mimeType": {
                        "type": "string",
                        "minLength": 1,
                        "description": "MIME type of the resource (e.g., text/plain, application/pdf)"
                      },
                      "filename": {
                        "type": "string",
                        "description": "Resource filename"
                      }
                    },
                    "required": [
                      "base64",
                      "mimeType"
                    ],
                    "additionalProperties": false,
                    "description": "Attach a resource to this prompt"
                  }
                },
                "required": [
                  "name",
                  "content"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Custom prompt created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prompt": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Prompt name"
                        },
                        "title": {
                          "type": "string",
                          "description": "Prompt title"
                        },
                        "description": {
                          "type": "string",
                          "description": "Prompt description"
                        },
                        "arguments": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Argument name"
                              },
                              "description": {
                                "type": "string",
                                "description": "Argument description"
                              },
                              "required": {
                                "type": "boolean",
                                "description": "Whether the argument is required"
                              }
                            },
                            "required": [
                              "name"
                            ],
                            "additionalProperties": false,
                            "description": "Prompt argument definition"
                          },
                          "description": "Array of argument definitions"
                        },
                        "source": {
                          "type": "string",
                          "enum": [
                            "mcp",
                            "file",
                            "starter",
                            "custom"
                          ],
                          "description": "Source of the prompt"
                        },
                        "metadata": {
                          "type": "object",
                          "additionalProperties": {
                            "nullable": true
                          },
                          "description": "Additional metadata"
                        }
                      },
                      "required": [
                        "name",
                        "source"
                      ],
                      "additionalProperties": false,
                      "description": "Created prompt information"
                    }
                  },
                  "required": [
                    "prompt"
                  ],
                  "additionalProperties": false,
                  "description": "Create prompt response"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/custom/{name}": {
      "delete": {
        "summary": "Delete Custom Prompt",
        "description": "Permanently deletes a custom prompt. Built-in prompts cannot be deleted",
        "tags": [
          "prompts"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The prompt name"
            },
            "required": true,
            "description": "The prompt name",
            "name": "name",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Prompt deleted"
          }
        }
      }
    },
    "/api/prompts/{name}": {
      "get": {
        "summary": "Get Prompt Definition",
        "description": "Fetches the definition for a specific prompt",
        "tags": [
          "prompts"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The prompt name"
            },
            "required": true,
            "description": "The prompt name",
            "name": "name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Prompt definition",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "definition": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Prompt name"
                        },
                        "title": {
                          "type": "string",
                          "description": "Prompt title"
                        },
                        "description": {
                          "type": "string",
                          "description": "Prompt description"
                        },
                        "arguments": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Argument name"
                              },
                              "description": {
                                "type": "string",
                                "description": "Argument description"
                              },
                              "required": {
                                "type": "boolean",
                                "description": "Whether the argument is required"
                              }
                            },
                            "required": [
                              "name"
                            ],
                            "additionalProperties": false,
                            "description": "Prompt argument definition"
                          },
                          "description": "Array of argument definitions"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "additionalProperties": false,
                      "description": "Prompt definition"
                    }
                  },
                  "required": [
                    "definition"
                  ],
                  "additionalProperties": false,
                  "description": "Get prompt definition response"
                }
              }
            }
          },
          "404": {
            "description": "Prompt not found"
          }
        }
      }
    },
    "/api/prompts/{name}/resolve": {
      "get": {
        "summary": "Resolve Prompt",
        "description": "Resolves a prompt template with provided arguments and returns the final text with resources",
        "tags": [
          "prompts"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The prompt name"
            },
            "required": true,
            "description": "The prompt name",
            "name": "name",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Additional context for prompt resolution"
            },
            "required": false,
            "description": "Additional context for prompt resolution",
            "name": "context",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "description": "Arguments to substitute in the prompt template (pass as a JSON string)"
            },
            "required": false,
            "description": "Arguments to substitute in the prompt template (pass as a JSON string)",
            "name": "args",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Resolved prompt content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "string",
                      "description": "Resolved prompt text"
                    },
                    "resources": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Array of resource identifiers"
                    }
                  },
                  "required": [
                    "text",
                    "resources"
                  ],
                  "additionalProperties": false,
                  "description": "Resolve prompt response"
                }
              }
            }
          },
          "404": {
            "description": "Prompt not found"
          }
        }
      }
    },
    "/api/resources": {
      "get": {
        "summary": "List All Resources",
        "description": "Retrieves a list of all available resources from all sources (MCP servers and internal providers)",
        "tags": [
          "resources"
        ],
        "responses": {
          "200": {
            "description": "List all resources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        true
                      ],
                      "description": "Indicates successful response"
                    },
                    "resources": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "uri": {
                            "type": "string",
                            "description": "Resource URI"
                          },
                          "name": {
                            "type": "string",
                            "description": "Resource name"
                          },
                          "description": {
                            "type": "string",
                            "description": "Resource description"
                          },
                          "mimeType": {
                            "type": "string",
                            "description": "MIME type of the resource"
                          }
                        },
                        "required": [
                          "uri"
                        ],
                        "additionalProperties": false,
                        "description": "Resource metadata"
                      },
                      "description": "Array of all available resources from all sources"
                    }
                  },
                  "required": [
                    "ok",
                    "resources"
                  ],
                  "additionalProperties": false,
                  "description": "List of all resources"
                }
              }
            }
          }
        }
      }
    },
    "/api/resources/{resourceId}/content": {
      "get": {
        "summary": "Read Resource Content",
        "description": "Reads the content of a specific resource by its URI. The resource ID in the URL must be URI-encoded",
        "tags": [
          "resources"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The URI-encoded resource identifier"
            },
            "required": true,
            "description": "The URI-encoded resource identifier",
            "name": "resourceId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        true
                      ],
                      "description": "Indicates successful response"
                    },
                    "content": {
                      "type": "object",
                      "properties": {
                        "contents": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "uri": {
                                "type": "string",
                                "description": "Resource URI"
                              },
                              "mimeType": {
                                "type": "string",
                                "description": "MIME type of the content"
                              },
                              "text": {
                                "type": "string",
                                "description": "Text content (for text resources)"
                              },
                              "blob": {
                                "type": "string",
                                "description": "Base64-encoded binary content (for binary resources)"
                              }
                            },
                            "required": [
                              "uri"
                            ],
                            "additionalProperties": false,
                            "description": "Resource content item"
                          },
                          "description": "Array of content items (typically one item)"
                        },
                        "_meta": {
                          "type": "object",
                          "additionalProperties": {
                            "nullable": true
                          },
                          "description": "Optional metadata about the resource"
                        }
                      },
                      "required": [
                        "contents"
                      ],
                      "additionalProperties": false,
                      "description": "Resource content from MCP ReadResourceResult"
                    }
                  },
                  "required": [
                    "ok",
                    "content"
                  ],
                  "additionalProperties": false,
                  "description": "Resource content response"
                }
              }
            }
          }
        }
      }
    },
    "/api/resources/{resourceId}": {
      "head": {
        "summary": "Check Resource Exists",
        "description": "Checks if a resource exists by its URI without retrieving its content",
        "tags": [
          "resources"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The URI-encoded resource identifier"
            },
            "required": true,
            "description": "The URI-encoded resource identifier",
            "name": "resourceId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource exists"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/api/memory": {
      "post": {
        "summary": "Create Memory",
        "description": "Creates a new memory",
        "tags": [
          "memory"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 10000,
                    "description": "The memory content"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 50
                    },
                    "maxItems": 10,
                    "description": "Optional tags"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "source": {
                        "type": "string",
                        "enum": [
                          "user",
                          "system"
                        ],
                        "description": "Source of the memory"
                      },
                      "pinned": {
                        "type": "boolean",
                        "description": "Whether this memory is pinned for auto-loading"
                      }
                    },
                    "description": "Optional metadata"
                  }
                },
                "required": [
                  "content"
                ],
                "additionalProperties": false,
                "description": "Input for creating a new memory"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Memory created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        true
                      ],
                      "description": "Indicates successful response"
                    },
                    "memory": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "minLength": 1,
                          "description": "Unique identifier for the memory"
                        },
                        "content": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 10000,
                          "description": "The actual memory content"
                        },
                        "createdAt": {
                          "type": "integer",
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "description": "Creation timestamp (Unix ms)"
                        },
                        "updatedAt": {
                          "type": "integer",
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "description": "Last update timestamp (Unix ms)"
                        },
                        "tags": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 50
                          },
                          "maxItems": 10,
                          "description": "Optional tags for categorization"
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "source": {
                              "type": "string",
                              "enum": [
                                "user",
                                "system"
                              ],
                              "description": "Source of the memory"
                            },
                            "pinned": {
                              "type": "boolean",
                              "description": "Whether this memory is pinned for auto-loading"
                            }
                          },
                          "description": "Additional metadata"
                        }
                      },
                      "required": [
                        "id",
                        "content",
                        "createdAt",
                        "updatedAt"
                      ],
                      "additionalProperties": false,
                      "description": "The created or retrieved memory"
                    }
                  },
                  "required": [
                    "ok",
                    "memory"
                  ],
                  "additionalProperties": false,
                  "description": "Single memory response"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Memories",
        "description": "Retrieves a list of all memories with optional filtering",
        "tags": [
          "memory"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Comma-separated list of tags to filter by"
            },
            "required": false,
            "description": "Comma-separated list of tags to filter by",
            "name": "tags",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "system"
              ],
              "description": "Filter by source (user or system)"
            },
            "required": false,
            "description": "Filter by source (user or system)",
            "name": "source",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "description": "Filter by pinned status (true or false)"
            },
            "required": false,
            "description": "Filter by pinned status (true or false)",
            "name": "pinned",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "description": "Maximum number of memories to return"
            },
            "required": false,
            "description": "Maximum number of memories to return",
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "description": "Number of memories to skip"
            },
            "required": false,
            "description": "Number of memories to skip",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List memories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        true
                      ],
                      "description": "Indicates successful response"
                    },
                    "memories": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Unique identifier for the memory"
                          },
                          "content": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 10000,
                            "description": "The actual memory content"
                          },
                          "createdAt": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "description": "Creation timestamp (Unix ms)"
                          },
                          "updatedAt": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "description": "Last update timestamp (Unix ms)"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 50
                            },
                            "maxItems": 10,
                            "description": "Optional tags for categorization"
                          },
                          "metadata": {
                            "type": "object",
                            "properties": {
                              "source": {
                                "type": "string",
                                "enum": [
                                  "user",
                                  "system"
                                ],
                                "description": "Source of the memory"
                              },
                              "pinned": {
                                "type": "boolean",
                                "description": "Whether this memory is pinned for auto-loading"
                              }
                            },
                            "description": "Additional metadata"
                          }
                        },
                        "required": [
                          "id",
                          "content",
                          "createdAt",
                          "updatedAt"
                        ],
                        "additionalProperties": false,
                        "description": "Memory item stored in the system"
                      },
                      "description": "List of memories"
                    }
                  },
                  "required": [
                    "ok",
                    "memories"
                  ],
                  "additionalProperties": false,
                  "description": "Multiple memories response"
                }
              }
            }
          }
        }
      }
    },
    "/api/memory/{id}": {
      "get": {
        "summary": "Get Memory by ID",
        "description": "Retrieves a specific memory by its unique identifier",
        "tags": [
          "memory"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Memory unique identifier"
            },
            "required": true,
            "description": "Memory unique identifier",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Memory details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        true
                      ],
                      "description": "Indicates successful response"
                    },
                    "memory": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "minLength": 1,
                          "description": "Unique identifier for the memory"
                        },
                        "content": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 10000,
                          "description": "The actual memory content"
                        },
                        "createdAt": {
                          "type": "integer",
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "description": "Creation timestamp (Unix ms)"
                        },
                        "updatedAt": {
                          "type": "integer",
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "description": "Last update timestamp (Unix ms)"
                        },
                        "tags": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 50
                          },
                          "maxItems": 10,
                          "description": "Optional tags for categorization"
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "source": {
                              "type": "string",
                              "enum": [
                                "user",
                                "system"
                              ],
                              "description": "Source of the memory"
                            },
                            "pinned": {
                              "type": "boolean",
                              "description": "Whether this memory is pinned for auto-loading"
                            }
                          },
                          "description": "Additional metadata"
                        }
                      },
                      "required": [
                        "id",
                        "content",
                        "createdAt",
                        "updatedAt"
                      ],
                      "additionalProperties": false,
                      "description": "The created or retrieved memory"
                    }
                  },
                  "required": [
                    "ok",
                    "memory"
                  ],
                  "additionalProperties": false,
                  "description": "Single memory response"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Memory",
        "description": "Updates an existing memory. Only provided fields will be updated",
        "tags": [
          "memory"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Memory unique identifier"
            },
            "required": true,
            "description": "Memory unique identifier",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 10000,
                    "description": "Updated content"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 50
                    },
                    "maxItems": 10,
                    "description": "Updated tags (replaces existing)"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "source": {
                        "type": "string",
                        "enum": [
                          "user",
                          "system"
                        ],
                        "description": "Source of the memory"
                      },
                      "pinned": {
                        "type": "boolean",
                        "description": "Whether this memory is pinned for auto-loading"
                      }
                    },
                    "description": "Updated metadata (merges with existing)"
                  }
                },
                "additionalProperties": false,
                "description": "Input for updating an existing memory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Memory updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        true
                      ],
                      "description": "Indicates successful response"
                    },
                    "memory": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "minLength": 1,
                          "description": "Unique identifier for the memory"
                        },
                        "content": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 10000,
                          "description": "The actual memory content"
                        },
                        "createdAt": {
                          "type": "integer",
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "description": "Creation timestamp (Unix ms)"
                        },
                        "updatedAt": {
                          "type": "integer",
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "description": "Last update timestamp (Unix ms)"
                        },
                        "tags": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 50
                          },
                          "maxItems": 10,
                          "description": "Optional tags for categorization"
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "source": {
                              "type": "string",
                              "enum": [
                                "user",
                                "system"
                              ],
                              "description": "Source of the memory"
                            },
                            "pinned": {
                              "type": "boolean",
                              "description": "Whether this memory is pinned for auto-loading"
                            }
                          },
                          "description": "Additional metadata"
                        }
                      },
                      "required": [
                        "id",
                        "content",
                        "createdAt",
                        "updatedAt"
                      ],
                      "additionalProperties": false,
                      "description": "The created or retrieved memory"
                    }
                  },
                  "required": [
                    "ok",
                    "memory"
                  ],
                  "additionalProperties": false,
                  "description": "Single memory response"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Memory",
        "description": "Permanently deletes a memory. This action cannot be undone",
        "tags": [
          "memory"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Memory unique identifier"
            },
            "required": true,
            "description": "Memory unique identifier",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Memory deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        true
                      ],
                      "description": "Indicates successful response"
                    },
                    "message": {
                      "type": "string",
                      "description": "Deletion confirmation message"
                    }
                  },
                  "required": [
                    "ok",
                    "message"
                  ],
                  "additionalProperties": false,
                  "description": "Memory deletion response"
                }
              }
            }
          }
        }
      }
    },
    "/api/agents": {
      "get": {
        "summary": "List Agents",
        "description": "Retrieves all agents (installed, available, and current active agent)",
        "tags": [
          "agents"
        ],
        "responses": {
          "200": {
            "description": "List all agents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "installed": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique agent identifier"
                          },
                          "name": {
                            "type": "string",
                            "description": "Agent name"
                          },
                          "description": {
                            "type": "string",
                            "description": "Agent description"
                          },
                          "author": {
                            "type": "string",
                            "description": "Agent author"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Agent tags"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "builtin",
                              "custom"
                            ],
                            "description": "Agent type"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "type"
                        ],
                        "additionalProperties": false,
                        "description": "Agent registry entry"
                      },
                      "description": "Agents installed locally"
                    },
                    "available": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique agent identifier"
                          },
                          "name": {
                            "type": "string",
                            "description": "Agent name"
                          },
                          "description": {
                            "type": "string",
                            "description": "Agent description"
                          },
                          "author": {
                            "type": "string",
                            "description": "Agent author"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Agent tags"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "builtin",
                              "custom"
                            ],
                            "description": "Agent type"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "type"
                        ],
                        "additionalProperties": false,
                        "description": "Agent registry entry"
                      },
                      "description": "Agents available from registry"
                    },
                    "current": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "nullable": true,
                          "description": "Agent identifier (null if no active agent)"
                        },
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "description": "Agent display name (null if no active agent)"
                        }
                      },
                      "required": [
                        "id",
                        "name"
                      ],
                      "additionalProperties": false,
                      "description": "Currently active agent"
                    }
                  },
                  "required": [
                    "installed",
                    "available",
                    "current"
                  ],
                  "additionalProperties": false,
                  "description": "List of all agents"
                }
              }
            }
          }
        }
      }
    },
    "/api/agents/current": {
      "get": {
        "summary": "Get Current Agent",
        "description": "Retrieves the currently active agent",
        "tags": [
          "agents"
        ],
        "responses": {
          "200": {
            "description": "Current agent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "nullable": true,
                      "description": "Agent identifier (null if no active agent)"
                    },
                    "name": {
                      "type": "string",
                      "nullable": true,
                      "description": "Agent display name (null if no active agent)"
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ],
                  "additionalProperties": false,
                  "description": "Basic agent information (nullable)"
                }
              }
            }
          }
        }
      }
    },
    "/api/agents/install": {
      "post": {
        "summary": "Install Agent",
        "description": "Installs an agent from the registry or from a custom source",
        "tags": [
          "agents"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Unique agent identifier"
                      },
                      "name": {
                        "type": "string",
                        "description": "Display name (defaults to derived from id)"
                      },
                      "sourcePath": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Path to agent configuration file or directory"
                      },
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "description": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Human-readable description of the agent"
                          },
                          "author": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Agent author or organization name"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Tags for categorizing the agent"
                          },
                          "main": {
                            "type": "string",
                            "description": "Main configuration file name within source directory"
                          }
                        },
                        "required": [
                          "description",
                          "author",
                          "tags"
                        ],
                        "additionalProperties": false
                      },
                      "injectPreferences": {
                        "type": "boolean",
                        "default": true,
                        "description": "Whether to inject user preferences into agent config"
                      }
                    },
                    "required": [
                      "id",
                      "sourcePath",
                      "metadata"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Unique agent identifier (e.g., \"database-agent\")"
                      },
                      "path": {
                        "type": "string",
                        "description": "Optional absolute file path for file-based agents (e.g., \"/path/to/agent.yml\")"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "additionalProperties": false
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Agent installed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "installed": {
                      "type": "boolean",
                      "enum": [
                        true
                      ],
                      "description": "Indicates successful installation"
                    },
                    "id": {
                      "type": "string",
                      "description": "Installed agent ID"
                    },
                    "name": {
                      "type": "string",
                      "description": "Installed agent name"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "builtin",
                        "custom"
                      ],
                      "description": "Type of agent installed"
                    }
                  },
                  "required": [
                    "installed",
                    "id",
                    "name",
                    "type"
                  ],
                  "additionalProperties": false,
                  "description": "Agent installation response"
                }
              }
            }
          }
        }
      }
    },
    "/api/agents/switch": {
      "post": {
        "summary": "Switch Agent",
        "description": "Switches to a different agent by ID or file path",
        "tags": [
          "agents"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Unique agent identifier (e.g., \"database-agent\")"
                  },
                  "path": {
                    "type": "string",
                    "description": "Optional absolute file path for file-based agents (e.g., \"/path/to/agent.yml\")"
                  }
                },
                "required": [
                  "id"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent switched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "switched": {
                      "type": "boolean",
                      "enum": [
                        true
                      ],
                      "description": "Indicates successful agent switch"
                    },
                    "id": {
                      "type": "string",
                      "description": "New active agent ID"
                    },
                    "name": {
                      "type": "string",
                      "description": "New active agent name"
                    }
                  },
                  "required": [
                    "switched",
                    "id",
                    "name"
                  ],
                  "additionalProperties": false,
                  "description": "Agent switch response"
                }
              }
            }
          }
        }
      }
    },
    "/api/agents/validate-name": {
      "post": {
        "summary": "Validate Agent Name",
        "description": "Checks if an agent ID conflicts with existing agents",
        "tags": [
          "agents"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Unique agent identifier (e.g., \"database-agent\")"
                  },
                  "path": {
                    "type": "string",
                    "description": "Optional absolute file path for file-based agents (e.g., \"/path/to/agent.yml\")"
                  }
                },
                "required": [
                  "id"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Name validation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "valid": {
                      "type": "boolean",
                      "description": "Whether the agent name is valid"
                    },
                    "conflict": {
                      "type": "string",
                      "description": "Type of conflict if name is invalid"
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation message"
                    }
                  },
                  "required": [
                    "valid"
                  ],
                  "additionalProperties": false,
                  "description": "Agent name validation result"
                }
              }
            }
          }
        }
      }
    },
    "/api/agents/uninstall": {
      "post": {
        "summary": "Uninstall Agent",
        "description": "Removes an agent from the system. Custom agents are removed from registry; builtin agents can be reinstalled",
        "tags": [
          "agents"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Unique agent identifier to uninstall"
                  },
                  "force": {
                    "type": "boolean",
                    "default": false,
                    "description": "Force uninstall even if agent is currently active"
                  }
                },
                "required": [
                  "id"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent uninstalled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "uninstalled": {
                      "type": "boolean",
                      "enum": [
                        true
                      ],
                      "description": "Indicates successful uninstallation"
                    },
                    "id": {
                      "type": "string",
                      "description": "Uninstalled agent ID"
                    }
                  },
                  "required": [
                    "uninstalled",
                    "id"
                  ],
                  "additionalProperties": false,
                  "description": "Agent uninstallation response"
                }
              }
            }
          }
        }
      }
    },
    "/api/agents/custom/create": {
      "post": {
        "summary": "Create Custom Agent",
        "description": "Creates a new custom agent from scratch via the UI/API",
        "tags": [
          "agents"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "minLength": 1,
                    "pattern": "^[a-z0-9-]+$",
                    "description": "Unique agent identifier"
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Display name for the agent"
                  },
                  "description": {
                    "type": "string",
                    "minLength": 1,
                    "description": "One-line description of the agent"
                  },
                  "author": {
                    "type": "string",
                    "description": "Author or organization"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Tags for discovery"
                  },
                  "llm": {
                    "type": "object",
                    "properties": {
                      "provider": {
                        "type": "string",
                        "enum": [
                          "openai",
                          "openai-compatible",
                          "anthropic",
                          "google",
                          "groq",
                          "xai",
                          "cohere"
                        ],
                        "description": "LLM provider id"
                      },
                      "model": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Model name"
                      },
                      "apiKey": {
                        "type": "string",
                        "description": "API key or environment variable reference (e.g., $OPENAI_API_KEY)"
                      }
                    },
                    "required": [
                      "provider",
                      "model"
                    ],
                    "additionalProperties": false,
                    "description": "LLM configuration"
                  },
                  "systemPrompt": {
                    "type": "string",
                    "minLength": 1,
                    "description": "System prompt for the agent"
                  }
                },
                "required": [
                  "id",
                  "name",
                  "description",
                  "llm",
                  "systemPrompt"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Custom agent created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created": {
                      "type": "boolean",
                      "enum": [
                        true
                      ],
                      "description": "Creation success indicator"
                    },
                    "id": {
                      "type": "string",
                      "description": "Agent identifier"
                    },
                    "name": {
                      "type": "string",
                      "description": "Agent name"
                    }
                  },
                  "required": [
                    "created",
                    "id",
                    "name"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/agent/path": {
      "get": {
        "summary": "Get Agent File Path",
        "description": "Retrieves the file path of the currently active agent configuration",
        "tags": [
          "agent"
        ],
        "responses": {
          "200": {
            "description": "Agent file path",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "Absolute path to agent configuration file"
                    },
                    "relativePath": {
                      "type": "string",
                      "description": "Relative path or basename"
                    },
                    "name": {
                      "type": "string",
                      "description": "Agent configuration filename without extension"
                    },
                    "isDefault": {
                      "type": "boolean",
                      "description": "Whether this is the default agent"
                    }
                  },
                  "required": [
                    "path",
                    "relativePath",
                    "name",
                    "isDefault"
                  ],
                  "additionalProperties": false,
                  "description": "Agent file path information"
                }
              }
            }
          }
        }
      }
    },
    "/api/agent/config": {
      "get": {
        "summary": "Get Agent Configuration",
        "description": "Retrieves the raw YAML configuration of the currently active agent",
        "tags": [
          "agent"
        ],
        "responses": {
          "200": {
            "description": "Agent configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "yaml": {
                      "type": "string",
                      "description": "Raw YAML configuration content"
                    },
                    "path": {
                      "type": "string",
                      "description": "Absolute path to configuration file"
                    },
                    "relativePath": {
                      "type": "string",
                      "description": "Relative path or basename"
                    },
                    "lastModified": {
                      "type": "string",
                      "description": "Last modification timestamp"
                    },
                    "warnings": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Configuration warnings"
                    }
                  },
                  "required": [
                    "yaml",
                    "path",
                    "relativePath",
                    "lastModified",
                    "warnings"
                  ],
                  "additionalProperties": false,
                  "description": "Agent configuration content"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Save Agent Configuration",
        "description": "Saves and applies YAML agent configuration. Creates backup before saving",
        "tags": [
          "agent"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "yaml": {
                    "type": "string",
                    "minLength": 1,
                    "description": "YAML agent configuration content to save"
                  }
                },
                "required": [
                  "yaml"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Configuration saved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        true
                      ],
                      "description": "Indicates successful save"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path to saved configuration file"
                    },
                    "reloaded": {
                      "type": "boolean",
                      "description": "Whether configuration was reloaded"
                    },
                    "restarted": {
                      "type": "boolean",
                      "description": "Whether agent was restarted"
                    },
                    "changesApplied": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of changes that were applied"
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    }
                  },
                  "required": [
                    "ok",
                    "path",
                    "reloaded",
                    "restarted",
                    "changesApplied",
                    "message"
                  ],
                  "additionalProperties": false,
                  "description": "Configuration save result"
                }
              }
            }
          }
        }
      }
    },
    "/api/agent/validate": {
      "post": {
        "summary": "Validate Agent Configuration",
        "description": "Validates YAML agent configuration without saving it",
        "tags": [
          "agent"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "yaml": {
                    "type": "string",
                    "minLength": 1,
                    "description": "YAML agent configuration content to validate"
                  }
                },
                "required": [
                  "yaml"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Validation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "valid": {
                      "type": "boolean",
                      "description": "Whether configuration is valid"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "line": {
                            "type": "integer",
                            "description": "Line number"
                          },
                          "column": {
                            "type": "integer",
                            "description": "Column number"
                          },
                          "path": {
                            "type": "string",
                            "description": "Configuration path"
                          },
                          "message": {
                            "type": "string",
                            "description": "Error message"
                          },
                          "code": {
                            "type": "string",
                            "description": "Error code"
                          }
                        },
                        "required": [
                          "message",
                          "code"
                        ]
                      },
                      "description": "Validation errors"
                    },
                    "warnings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "string",
                            "description": "Configuration path"
                          },
                          "message": {
                            "type": "string",
                            "description": "Warning message"
                          },
                          "code": {
                            "type": "string",
                            "description": "Warning code"
                          }
                        },
                        "required": [
                          "path",
                          "message",
                          "code"
                        ],
                        "additionalProperties": false
                      },
                      "description": "Configuration warnings"
                    }
                  },
                  "required": [
                    "valid",
                    "errors",
                    "warnings"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/agent/config/export": {
      "get": {
        "summary": "Export Agent Configuration",
        "description": "Exports the effective agent configuration with sensitive values redacted",
        "tags": [
          "agent"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Session identifier to export session-specific configuration"
            },
            "required": false,
            "description": "Session identifier to export session-specific configuration",
            "name": "sessionId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Exported configuration",
            "content": {
              "application/x-yaml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  }
}
