{
  "openapi": "3.0.0",
  "info": {
    "title": "Dexto API",
    "version": "1.0.0",
    "description": "OpenAPI spec for the Dexto Hono server"
  },
  "components": {
    "schemas": {},
    "parameters": {}
  },
  "paths": {
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Returns server health status",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "Server health",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          }
        }
      }
    },
    "/api/greeting": {
      "get": {
        "summary": "Get Greeting Message",
        "description": "Retrieves the greeting message from the agent configuration",
        "tags": [
          "config"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sessionId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Greeting",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/message": {
      "post": {
        "summary": "Send Message (async)",
        "description": "Sends a message and returns immediately. The full response will be sent over WebSocket",
        "tags": [
          "messages"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  },
                  "sessionId": {
                    "type": "string"
                  },
                  "stream": {
                    "type": "boolean"
                  },
                  "imageData": {
                    "type": "object",
                    "properties": {
                      "base64": {
                        "type": "string"
                      },
                      "mimeType": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "base64",
                      "mimeType"
                    ]
                  },
                  "fileData": {
                    "type": "object",
                    "properties": {
                      "base64": {
                        "type": "string"
                      },
                      "mimeType": {
                        "type": "string"
                      },
                      "filename": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "base64",
                      "mimeType"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Message queued",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/api/message-sync": {
      "post": {
        "summary": "Send Message (sync)",
        "description": "Sends a message and waits for the full response",
        "tags": [
          "messages"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  },
                  "sessionId": {
                    "type": "string"
                  },
                  "stream": {
                    "type": "boolean"
                  },
                  "imageData": {
                    "type": "object",
                    "properties": {
                      "base64": {
                        "type": "string"
                      },
                      "mimeType": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "base64",
                      "mimeType"
                    ]
                  },
                  "fileData": {
                    "type": "object",
                    "properties": {
                      "base64": {
                        "type": "string"
                      },
                      "mimeType": {
                        "type": "string"
                      },
                      "filename": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "base64",
                      "mimeType"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Synchronous response",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/api/reset": {
      "post": {
        "summary": "Reset Conversation",
        "description": "Resets the conversation history for a given session",
        "tags": [
          "messages"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset initiated",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/llm/current": {
      "get": {
        "summary": "Get Current LLM Config",
        "description": "Retrieves the current LLM configuration for the agent or a specific session",
        "tags": [
          "llm"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sessionId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Current LLM config",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/llm/catalog": {
      "get": {
        "summary": "LLM Catalog",
        "description": "Providers, models, capabilities, and API key status",
        "tags": [
          "llm"
        ],
        "parameters": [
          {
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "required": false,
            "name": "provider",
            "in": "query"
          },
          {
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "true"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "false"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "1"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "0"
                  ]
                }
              ]
            },
            "required": false,
            "name": "hasKey",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "vercel",
                "in-built"
              ]
            },
            "required": false,
            "name": "router",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "pdf",
                "image",
                "audio"
              ]
            },
            "required": false,
            "name": "fileType",
            "in": "query"
          },
          {
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "true"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "false"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "1"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "0"
                  ]
                }
              ]
            },
            "required": false,
            "name": "defaultOnly",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "grouped",
                "flat"
              ],
              "default": "grouped"
            },
            "required": false,
            "name": "mode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "LLM catalog",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/llm/key": {
      "post": {
        "summary": "Save Provider API Key",
        "description": "Stores an API key for a provider in .env and makes it available immediately",
        "tags": [
          "llm"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "provider": {
                    "type": "string",
                    "enum": [
                      "openai",
                      "openai-compatible",
                      "anthropic",
                      "google",
                      "groq",
                      "xai",
                      "cohere"
                    ]
                  },
                  "apiKey": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": [
                  "provider",
                  "apiKey"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "API key saved",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/llm/switch": {
      "post": {
        "summary": "Switch LLM",
        "description": "Switches the LLM configuration for the agent or a specific session",
        "tags": [
          "llm"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "LLM switch result",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/sessions": {
      "get": {
        "summary": "List Sessions",
        "description": "Retrieves a list of all active sessions",
        "tags": [
          "sessions"
        ],
        "responses": {
          "200": {
            "description": "List sessions",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Session",
        "description": "Creates a new session",
        "tags": [
          "sessions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Session created",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/sessions/current": {
      "get": {
        "summary": "Get Current Session",
        "description": "Retrieves the ID of the currently active session",
        "tags": [
          "sessions"
        ],
        "responses": {
          "200": {
            "description": "Current session",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/sessions/{sessionId}": {
      "get": {
        "summary": "Get Session Details",
        "description": "Fetches details for a specific session",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Session details",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Session",
        "description": "Permanently deletes a session and all its conversation history. This action cannot be undone",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Session deleted",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update Session Title",
        "description": "Updates the title of an existing session",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 120
                  }
                },
                "required": [
                  "title"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session updated",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/sessions/{sessionId}/history": {
      "get": {
        "summary": "Get Session History",
        "description": "Retrieves the conversation history for a session",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Session history",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/sessions/{sessionId}/cancel": {
      "post": {
        "summary": "Cancel Session Run",
        "description": "Cancels an in-flight agent run for the specified session",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Cancel in-flight run",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/sessions/{sessionId}/load": {
      "post": {
        "summary": "Load Session",
        "description": "Sets a session as the current active session",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session loaded/reset",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/search/messages": {
      "get": {
        "summary": "Search Messages",
        "description": "Searches for messages across all sessions or within a specific session",
        "tags": [
          "search"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "q",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "nullable": true,
              "minimum": 0
            },
            "required": false,
            "name": "offset",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sessionId",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "assistant",
                "system",
                "tool"
              ]
            },
            "required": false,
            "name": "role",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Message search results",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/search/sessions": {
      "get": {
        "summary": "Search Sessions",
        "description": "Searches for sessions that contain the specified query",
        "tags": [
          "search"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Session search results",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/servers": {
      "post": {
        "summary": "Add MCP Server",
        "description": "Connects a new MCP server dynamically",
        "tags": [
          "mcp"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "config": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "stdio"
                            ]
                          },
                          "command": {
                            "type": "string"
                          },
                          "args": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "default": [],
                            "description": "Array of arguments for the command (e.g., ['script.js'])"
                          },
                          "env": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "default": {},
                            "description": "Optional environment variables for the server process"
                          },
                          "timeout": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "default": 30000
                          },
                          "connectionMode": {
                            "type": "string",
                            "enum": [
                              "strict",
                              "lenient"
                            ],
                            "default": "lenient"
                          }
                        },
                        "required": [
                          "type",
                          "command"
                        ],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "sse"
                            ]
                          },
                          "url": {
                            "type": "string",
                            "description": "URL for the SSE server endpoint"
                          },
                          "headers": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "default": {}
                          },
                          "timeout": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "default": 30000
                          },
                          "connectionMode": {
                            "type": "string",
                            "enum": [
                              "strict",
                              "lenient"
                            ],
                            "default": "lenient"
                          }
                        },
                        "required": [
                          "type",
                          "url"
                        ],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "http"
                            ]
                          },
                          "url": {
                            "type": "string",
                            "description": "URL for the HTTP server"
                          },
                          "headers": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "default": {}
                          },
                          "timeout": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "default": 30000
                          },
                          "connectionMode": {
                            "type": "string",
                            "enum": [
                              "strict",
                              "lenient"
                            ],
                            "default": "lenient"
                          }
                        },
                        "required": [
                          "type",
                          "url"
                        ],
                        "additionalProperties": false
                      }
                    ]
                  },
                  "persistToAgent": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "config"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Server connected",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List MCP Servers",
        "description": "Gets a list of all connected and failed MCP servers",
        "tags": [
          "mcp"
        ],
        "responses": {
          "200": {
            "description": "Servers list",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/tools": {
      "get": {
        "summary": "List Server Tools",
        "description": "Retrieves the list of tools available on a specific MCP server",
        "tags": [
          "mcp"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Tools list",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}": {
      "delete": {
        "summary": "Remove MCP Server",
        "description": "Disconnects and removes an MCP server",
        "tags": [
          "mcp"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Disconnected",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/restart": {
      "post": {
        "summary": "Restart MCP Server",
        "description": "Restarts a connected MCP server",
        "tags": [
          "mcp"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Server restarted",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/tools/{toolName}/execute": {
      "post": {
        "summary": "Execute MCP Tool",
        "description": "Executes a tool on an MCP server directly",
        "tags": [
          "mcp"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "toolName",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tool executed",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/resources": {
      "get": {
        "summary": "List Server Resources",
        "description": "Retrieves all resources available from a specific MCP server",
        "tags": [
          "mcp"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Server resources",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/resources/{resourceId}/content": {
      "get": {
        "summary": "Read Server Resource Content",
        "description": "Reads content from a specific resource on an MCP server. This endpoint automatically constructs the qualified URI format (mcp:serverId:resourceId)",
        "tags": [
          "mcp"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "resourceId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource content",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/webhooks": {
      "post": {
        "summary": "Register Webhook",
        "description": "Registers a new webhook endpoint to receive agent events",
        "tags": [
          "webhooks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "secret": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "url"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Webhook registered",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Webhooks",
        "description": "Retrieves a list of all registered webhooks",
        "tags": [
          "webhooks"
        ],
        "responses": {
          "200": {
            "description": "List webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/webhooks/{webhookId}": {
      "get": {
        "summary": "Get Webhook Details",
        "description": "Fetches details for a specific webhook",
        "tags": [
          "webhooks"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "webhookId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Webhook",
        "description": "Permanently removes a webhook endpoint. This action cannot be undone",
        "tags": [
          "webhooks"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "webhookId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Removed",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/webhooks/{webhookId}/test": {
      "post": {
        "summary": "Test Webhook",
        "description": "Sends a sample event to test webhook connectivity and configuration",
        "tags": [
          "webhooks"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "webhookId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Test result",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/prompts": {
      "get": {
        "summary": "List Prompts",
        "description": "Retrieves all available prompts, including both built-in and custom prompts",
        "tags": [
          "prompts"
        ],
        "responses": {
          "200": {
            "description": "List all prompts",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/custom": {
      "post": {
        "summary": "Create Custom Prompt",
        "description": "Creates a new custom prompt with optional resource attachment. Maximum request size: 10MB",
        "tags": [
          "prompts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string",
                    "minLength": 1
                  },
                  "arguments": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "minLength": 1
                        },
                        "description": {
                          "type": "string"
                        },
                        "required": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "resource": {
                    "type": "object",
                    "properties": {
                      "base64": {
                        "type": "string",
                        "minLength": 1
                      },
                      "mimeType": {
                        "type": "string",
                        "minLength": 1
                      },
                      "filename": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "base64",
                      "mimeType"
                    ],
                    "additionalProperties": false
                  }
                },
                "required": [
                  "name",
                  "content"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Custom prompt created",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/custom/{name}": {
      "delete": {
        "summary": "Delete Custom Prompt",
        "description": "Permanently deletes a custom prompt. Built-in prompts cannot be deleted",
        "tags": [
          "prompts"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "name",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Prompt deleted"
          }
        }
      }
    },
    "/api/prompts/{name}": {
      "get": {
        "summary": "Get Prompt Definition",
        "description": "Fetches the definition for a specific prompt",
        "tags": [
          "prompts"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Prompt definition",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "404": {
            "description": "Prompt not found"
          }
        }
      }
    },
    "/api/prompts/{name}/resolve": {
      "get": {
        "summary": "Resolve Prompt",
        "description": "Resolves a prompt template with provided arguments and returns the final text with resources",
        "tags": [
          "prompts"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "name",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "context",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "args",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Resolved prompt content",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "404": {
            "description": "Prompt not found"
          }
        }
      }
    },
    "/api/resources": {
      "get": {
        "summary": "List All Resources",
        "description": "Retrieves a list of all available resources from all sources (MCP servers and internal providers)",
        "tags": [
          "resources"
        ],
        "responses": {
          "200": {
            "description": "List all resources",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/resources/{resourceId}/content": {
      "get": {
        "summary": "Read Resource Content",
        "description": "Reads the content of a specific resource by its URI. The resource ID in the URL must be URI-encoded",
        "tags": [
          "resources"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "resourceId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource content",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/resources/{resourceId}": {
      "head": {
        "summary": "Check Resource Exists",
        "description": "Checks if a resource exists by its URI without retrieving its content",
        "tags": [
          "resources"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "resourceId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource exists"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/api/memory": {
      "post": {
        "summary": "Create Memory",
        "description": "Creates a new memory",
        "tags": [
          "memory"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 10000,
                    "description": "The memory content"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 50
                    },
                    "maxItems": 10,
                    "description": "Optional tags"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "source": {
                        "type": "string",
                        "enum": [
                          "user",
                          "system"
                        ],
                        "description": "Source of the memory"
                      },
                      "pinned": {
                        "type": "boolean",
                        "description": "Whether this memory is pinned for auto-loading"
                      }
                    },
                    "description": "Optional metadata"
                  }
                },
                "required": [
                  "content"
                ],
                "additionalProperties": false,
                "description": "Input for creating a new memory"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Memory created",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Memories",
        "description": "Retrieves a list of all memories with optional filtering",
        "tags": [
          "memory"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "tags",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "system"
              ]
            },
            "required": false,
            "name": "source",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "pinned",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List memories",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/memory/{id}": {
      "get": {
        "summary": "Get Memory by ID",
        "description": "Retrieves a specific memory by its unique identifier",
        "tags": [
          "memory"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Memory details",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Memory",
        "description": "Updates an existing memory. Only provided fields will be updated",
        "tags": [
          "memory"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 10000,
                    "description": "Updated content"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 50
                    },
                    "maxItems": 10,
                    "description": "Updated tags (replaces existing)"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "source": {
                        "type": "string",
                        "enum": [
                          "user",
                          "system"
                        ],
                        "description": "Source of the memory"
                      },
                      "pinned": {
                        "type": "boolean",
                        "description": "Whether this memory is pinned for auto-loading"
                      }
                    },
                    "description": "Updated metadata (merges with existing)"
                  }
                },
                "additionalProperties": false,
                "description": "Input for updating an existing memory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Memory updated",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Memory",
        "description": "Permanently deletes a memory. This action cannot be undone",
        "tags": [
          "memory"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Memory deleted",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    }
  }
}
