---
description: 
globs: src/core/config/*
alwaysApply: false
---
# Zod Schema Design Guidelines

This document provides best practices for creating and maintaining the Zod schemas in [`schemas.ts`](mdc:src/core/config/schemas.ts). This file is the single source of truth for all application configuration, ensuring type safety and clear validation.

---

## Core Principles

1.  **Single Source of Truth**: All configuration shapes for the application should be defined here. This includes `agent.yml`, agent states, and other structured data.
2.  **Clarity and Safety**: Schemas should be as descriptive and strict as possible to catch errors early and guide developers.
3.  **Maintainability**: Keep schemas clean, well-documented, and easy to understand.

---

## Best Practices

### 1. Always Use `.strict()` for Configuration Objects

To prevent typos and unknown fields from being silently ignored, all top-level configuration objects and nested objects should use `.strict()`.

-   **Why?** It ensures that the configuration files (`agent.yml`, etc.) match the schema exactly, catching common errors like misspelled keys.

```typescript
// ✅ DO: Use .strict() for object schemas
export const StdioServerConfigSchema = z
    .object({
        type: z.literal('stdio'),
        command: z.string(),
        // ... other fields
    })
    .strict(); // This prevents extra fields

// ❌ DON'T: Allow unknown keys in config objects
const LlmConfig = z.object({
    provider: z.string(),
    model: z.string(),
    // No .strict() means a typo like 'modle' would be ignored
});
```

### 2. Prefer `discriminatedUnion` over `union`

When you have a union of objects distinguished by a specific field (like `type`), always use `z.discriminatedUnion()`.

-   **Why?** It provides much clearer and more concise error messages. Instead of showing errors for *every* member of the union, it validates only against the schema that matches the discriminator field.

```typescript
// ✅ DO: Use discriminatedUnion with a discriminator key
export const McpServerConfigSchema = z.discriminatedUnion(
    'type', // The discriminator field
    [StdioServerConfigSchema, SseServerConfigSchema, HttpServerConfigSchema]
);

// ❌ DON'T: Use a generic union for distinguishable objects
const BadSchema = z.union([
    z.object({ type: z.literal('a'), val: z.string() }),
    z.object({ type: z.literal('b'), num: z.number() }),
]);
// An error here would be noisy and less helpful.
```

### 3. Describe Every Field

Use `.describe()` on every schema field to explain its purpose.

-   **Why?** This serves as inline documentation, is used to generate help text, and helps other developers understand the configuration options without digging through the code.

```typescript
// ✅ DO: Add a clear description
export const HttpServerConfigSchema = z.object({
    url: z.string().url().describe('URL for the HTTP server'),
    timeout: z
        .number()
        .positive()
        .default(30000)
        .describe('Timeout in milliseconds for HTTP requests.'),
});
```

### 4. Provide Sensible Defaults

Use `.default()` for optional fields to ensure the configuration object is always fully hydrated.

-   **Why?** It simplifies the consuming code, as you don't need to handle `undefined` cases for common optional values.

```typescript
// ✅ DO: Set a default for optional fields
const ServerSchema = z.object({
    // ...
    timeout: z.number().optional().default(30000),
});
```

### 5. Use `superRefine` for Complex Validation

For validation logic that involves multiple fields (cross-field validation), use `.superRefine()`.

-   **Why?** It keeps complex business logic coupled with the schema definition itself, rather than scattering validation checks throughout the codebase.

```typescript
// ✅ DO: Use superRefine for cross-field validation
export const LLMConfigSchema = z
    .object({
        provider: z.string(),
        model: z.string(),
        baseURL: z.string().url().optional(),
    })
    .strict()
    .superRefine((data, ctx) => {
        // Example: baseURL is only allowed if provider is 'openai'
        if (data.baseURL && data.provider !== 'openai') {
            ctx.addIssue({
                code: z.ZodIssueCode.custom,
                path: ['baseURL'],
                message: "A custom baseURL is only supported for the 'openai' provider.",
            });
        }
    });
```