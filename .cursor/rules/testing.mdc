---
description: Testing patterns, commands, and validation requirements for Dexto development
globs: ["**/*.test.ts", "**/*.integration.test.ts", "**/*.spec.ts", "**/*.ts", "**/*.js"]
alwaysApply: true
---

- **Test File Classification**
  - **Unit Tests**: Use `.test.ts` suffix for isolated component testing
    - Mock external dependencies (storage, services, APIs)
    - Fast execution (< 100ms per test)
    - Test individual functions/classes in isolation
  - **Integration Tests**: Use `.integration.test.ts` suffix for end-to-end testing
    - Test complete flows through multiple system layers
    - Use real storage backends with in-memory configuration
    - Test actual component interactions
    - May include slower operations

- **Test Commands**
  - **All tests**: `pnpm test` or `pnpm run test`
  - **Unit tests only**: `pnpm run test:unit` (excludes `**/*.integration.test.ts`)
  - **Integration tests only**: `pnpm run test:integ` (runs only `**/*.integration.test.ts`)
  - **Watch modes**: 
    - `pnpm run test:unit:watch` for unit test development
    - `pnpm run test:integ:watch` for integration test development

- **Mandatory Validation Before Completion**
  - The agent **MUST run** the following commands and ensure they exit with status `0`:
    - `pnpm run build`  – compiles the project bundle
    - `pnpm test`       – executes the full test suite
    - `pnpm run lint`   – checks for ESLint violations
    - `pnpm run typecheck` – runs the strict TypeScript type checker
  - If any command fails, the agent should:
    1. Stop further edits aimed at feature implementation
    2. Diagnose and fix the underlying issue
    3. Re-run the failing command(s) until all four commands pass

- **Test Organization Examples**
  ```typescript
  // ✅ DO: Unit test structure
  describe('SessionManager', () => {
    let sessionManager: SessionManager;
    let mockServices: any;

    beforeEach(() => {
      // Setup mocks for isolated testing
    });

    test('creates new session with valid ID', () => {
      // Test isolated functionality
    });
  });

  // ✅ DO: Integration test structure  
  describe('Session Integration: Chat History Preservation', () => {
    let agent: DextoAgent;
    
    beforeEach(async () => {
      // Setup real components with test config
      agent = new DextoAgent(testConfig);
      await agent.start();
    });

    test('full integration: chat history survives session expiry', async () => {
      // Test complete end-to-end workflows
    });
  });
  ```

- **Development Workflow**
  - Use `pnpm run test:unit:watch` during feature development
  - Run `pnpm run test:integ` before submitting changes
  - Add regression tests when fixing bugs
  - Follow existing patterns in the codebase for test structure

- **Quality Requirements**
  - Unit tests must pass before commits
  - Integration tests must pass before releases
  - Tests should be deterministic and not flaky
  - Use realistic but anonymized test data
